@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@namespace WebVella.Tefter.Web.Components
@inherits TfFormBaseComponent

<style>
	.talk-panel {
		--space-background-color: @TfAppState.Value.SpaceBackgkroundColor;
		--space-color: @TfAppState.Value.SpaceColorString;
	}
</style>
@if (_activeThread is not null)
{
	<style>
		::part(control) {
			--dialog-width: 60vw;
		}
	</style>
}
<FluentDialogHeader Style="display:none" />
<FluentDialogFooter Style="display:none" />
<FluentDialogBody>
	<div>
		@if (_isLoading)
		{
			<TfLoadingPane />
		}
		else if (Content.ChannelId is null)
		{
			<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("No channel is configured for this column!")</FluentMessageBar>
		}
		else if (_channel is null)
		{
			<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("No talk channel is selected for this view column!")</FluentMessageBar>
		}
		else if (String.IsNullOrWhiteSpace(_channel.SharedKey))
		{
			<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("The talk channel has no shared key set!")</FluentMessageBar>
		}
		else if (_skValue is null)
		{
			<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("The selected dataset does not support the shared key '{0}' of channel '{1}'!", _channel.SharedKey, _channel.Name)</FluentMessageBar>
		}
		else if (_skValue == Guid.Empty)
		{
			<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("The selected shared key '{0}' value is not yet generated for this row of the dataset!", _channel.SharedKey)</FluentMessageBar>
		}
		else
		{
			<div class="talk-panel">
				<div class="talk-panel__left">
					<div class="talk-panel__left__header">
						<div class="talk-channel-label">@($"#{_channel.Name}")</div>
						<div>
							<FluentButton Appearance="@Appearance.Stealth"
										  OnClick="_cancel"
										  IconStart="TfConstants.CloseIcon.WithColor(Color.Neutral)" />
						</div>
					</div>
					<div class="talk-panel__left__body">
						@if (_threads.Count == 0)
						{
							<div class="talk-panel__left__body__info">
								<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Info">@LOC("No messages in this thread yet")</FluentMessageBar>
							</div>
						}
						else
						{
							<div class="talk-panel__left__body__messages">
								@{
									var channelCssDict = _generateThreadClassDict(_threads);
								}
								@foreach (TalkThread context in _threads)
								{
									if (context.DeletedOn.HasValue && context.SubThread.Count == 0) continue;
									<TalkMessage @key=context.Id
												 Item="context"
												 CurrentUser="TfUserState.Value.CurrentUser"
												 Class="@channelCssDict[context.Id]"
												 IsEdited="@(_threadEditedId == context.Id)"
												 IsSaving=@(_threadIdUpdateSaving == context.Id)
												 OnDelete="@(_ => _deleteThread(context))"
												 OnEdit="@(_ => _editThread(context))"
												 OnReply="@(_ => _replyToThread(context))"
												 OnEditSave="@(x => _saveMessage(context,x))"
												 OnEditCancel="@(_ => _cancelSaveMessage())"
												 OnSubThreadView="@(_ => _onSubThreadView(context))" />
								}
							</div>
						}
					</div>
					<div class="talk-panel__left__footer">
						<div class="talk-editor">
							<TfEditor @ref=_channelEditor Placeholder="@LOC("Message in #{0}",_channel.Name)" @bind-Value="_channelEditorContent" OnEnter="_sendMessage" />
						</div>
						<div class="talk-editor__actions">
							<div class="editor__actions__left"></div>
							<div class="editor__actions__right">
								<FluentButton IconStart="@TfConstants.GetIcon("Send")" OnClick="_sendMessage"
											  Loading="_channelEditorSending" Disabled="_channelEditorSending">@LOC("Send")</FluentButton>
							</div>
						</div>
					</div>
				</div>
				<div class="talk-panel__right" style="@(_activeThread is null ? "display:none" : "")">
					@if (_activeThread is not null)
					{
						@if (_activeThread.RelatedSK.Keys.Count > 1)
						{
							<div class="talk-panel__right__header broadcast">
								<div class="talk-panel__right__header-icon">
									<FluentIcon Value="@TfConstants.GetIcon("Communication").WithColor(Color.Neutral)" />
								</div>
								<div class="talk-panel__right__header-label">@LOC("Broadcast")</div>
								<div class="talk-panel__right__header-actions">
									<FluentButton Appearance="@Appearance.Stealth" Title=@LOC("view broadcast details")
												  OnClick="_showThreadBradcastDetails"
												  IconStart="@(_threadBroadcastVisible ? TfConstants.GetIcon("ChevronDown").WithColor(Color.Neutral) : TfConstants.GetIcon("ChevronLeft").WithColor(Color.Neutral))" />
									<FluentButton Appearance="@Appearance.Stealth"
												  Title=@LOC("close thread")
												  OnClick="_closeActiveThread"
												  IconStart="TfConstants.CloseIcon.WithColor(Color.Neutral)" />
								</div>
							</div>
							@if (_threadBroadcastVisible)
							{
								<div class="talk-panel__right__subheader">
									<table class="tf-grid">
										<tbody class="tf-grid-tbody">
											@foreach (var key in _activeThread.RelatedSK.Keys)
											{
												<tr @key=@key class="tf-grid-tr">
													<td class="tf-grid-td"><div>@_activeThread.RelatedSK[key]</div></td>
												</tr>
											}
										</tbody>
									</table>
								</div>
							}
						}
						else
						{
							<div class="talk-panel__right__header">
								<div class="talk-panel__right__header-icon">
									<FluentIcon Value="@TfConstants.GetIcon("CommentMultiple").WithColor(Color.Neutral)" />
								</div>
								<div class="talk-panel__right__header-label">@LOC("Thread")</div>
								<div class="talk-panel__right__header-actions">
									<FluentButton Appearance="@Appearance.Stealth"
												  Title=@LOC("close thread")
												  OnClick="_closeActiveThread"
												  IconStart="TfConstants.CloseIcon.WithColor(Color.Neutral)" />
								</div>
							</div>
						}
						<div class="talk-panel__right__body">
							<div class="talk-panel__right__body__messages">
								<TalkMessage @key=_activeThread.Id
											 Item="_activeThread"
											 CurrentUser="TfUserState.Value.CurrentUser"
											 Class=""
											 IsEdited="@(_subthreadEditedId == _activeThread.Id)"
											 IsSaving=@(_threadIdUpdateSaving == _activeThread.Id)
											 IsSubThread="true"
											 OnDelete="@(_ => _deleteThread(_activeThread))"
											 OnEdit="@(_ => _editThread(_activeThread,false))"
											 OnReply="@(_ => _replyToThread(_activeThread))"
											 OnEditSave="@(x => _saveMessage(_activeThread,x))"
											 OnEditCancel="@(_ => _cancelSaveMessage())" />

								@if (_activeThread.SubThread is not null && _activeThread.SubThread.Count > 0)
								{
									var visibleThreads = _activeThread.SubThread.Where(x => x.DeletedOn is null).ToList();
									if (visibleThreads.Count > 0)
									{
										<div class="talk-message-separator">
											<div class="talk-message-separator-label">@LOC("{0} replies", visibleThreads.Count)</div>
											<div class="talk-message-separator-ruler"></div>
										</div>
									}
								}
								@{
									var threadCssDict = _generateThreadClassDict(_activeThread.SubThread);
								}
								@foreach (var context in _activeThread.SubThread)
								{
									if (context.DeletedOn.HasValue && context.SubThread.Count == 0) continue;
									<TalkMessage @key=context.Id
												 Item="context"
												 CurrentUser="TfUserState.Value.CurrentUser"
												 Class="@threadCssDict[context.Id]"
												 IsEdited="@(_subthreadEditedId == context.Id)"
												 IsSaving=@(_threadIdUpdateSaving == context.Id)
												 IsSubThread="true"
												 OnDelete="@(_ => _deleteThread(context))"
												 OnEdit="@(_ => _editThread(context,false))"
												 OnReply="@(_ => _replyToThread(context))"
												 OnEditSave="@(x => _saveMessage(context,x))"
												 OnEditCancel="@(_ => _cancelSaveMessage())" />
								}
								<div class="talk-panel__right__body__messages__editor">
									<div class="talk-editor">
										<TfEditor @ref=_threadEditor Placeholder="@LOC("Reply...")" @bind-Value="_threadEditorContent"
												  OnEnter="_replyMessage" />
									</div>
									<div class="talk-editor__actions">
										<div class="editor__actions__left">
											<FluentCheckbox @bind-Value=@_threadVisibleInChannel Label="@LOC("attach to channel")" />
										</div>
										<div class="editor__actions__right">
											<FluentButton IconStart="@TfConstants.GetIcon("Send")" OnClick="_replyMessage"
														  Loading="_threadEditorSending" Disabled="_threadEditorSending">@LOC("Send")</FluentButton>
										</div>
									</div>
								</div>

							</div>
						</div>
					}
				</div>
			</div>
		}
	</div>
</FluentDialogBody>
