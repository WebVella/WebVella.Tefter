@namespace WebVella.Tefter.Talk.Components
@using WebVella.Tefter.UI.Components
@inherits TfBaseComponent

<div class="@_class">
	@if (!IsEdited)
	{
		<div class="talk-message__left">
			@if (Item.DeletedOn is null)
			{
				<TucAvatar User="Item?.User" Class="talk-avatar" />
				<div class="talk-timestamp" style="color:var(--tf-font-color-mute)">
					@Item.CreatedOn.ToString("HH:mm")
				</div>
			}
			else
			{
				<TucAvatar Class="talk-avatar talk-avatar-deleted">
					<FluentIcon Value="@TfConstants.GetIcon("Delete")" Width="16" Style="fill: var(--neutral-layer-2) !important;" />
				</TucAvatar>
			}
		</div>
		<div class="talk-message__right">
			<div class="talk-message__right__top">
				@if (Item.DeletedOn is not null)
				{
					<span class="talk-deleted">@LOC("thread is deleted")</span>
				}
				else
				{
					@if (Item.ConnectedDataIdentityValuesCount > 1)
					{
						<span class="talk-broadcast" title="@LOC("connected to multiple rows")">
							<FluentIcon Value="@TfConstants.GetIcon("LinkMultiple")" />
						</span>
					}
					@if (Item.VisibleInChannel && Item.ThreadId is not null)
					{
						<span class="talk-attachment" title="@LOC("attached to the channel")">
							<FluentIcon Value="@TfConstants.GetIcon("Attach")" />
						</span>
					}
					<span class="talk-sender">@Item?.User?.Names</span>
					<span class="talk-timestamp" title="@Item.CreatedOn.ToString(TfConstants.DateTimeFormat)">@Item.CreatedOn.ToString(TfConstants.HourFormat)</span>
					@if (Item.LastUpdatedOn is not null)
					{
						<span class="talk-updated" style="margin-left:5px;" title="@Item.LastUpdatedOn?.ToString(TfConstants.DateTimeFormat)">(@LOC("updated"))</span>
					}
				}
			</div>
			@if (Item.DeletedOn is null)
			{
				@if (!IsSubThread && Item.ParentThread is not null)
				{
					<div class="talk-inreply">
						<span class="talk-inreply-label">@LOC("in reply to:")</span>
						<span class="talk-inreply-parent"><a href="#" @onclick="@OnSubThreadView" @onclick:preventDefault>@_parentContent</a></span>
					</div>
				}
				<div class="talk-message__right__bottom">
					@((MarkupString)Item.Content)
				</div>
			}
			@if (!IsSubThread && Item.SubThread.Count > 0)
			{
				var distinctUsers = Item.SubThread.Select(x => x.User).DistinctBy(x => x.Id).ToList();
				var distinctUsersLimit = 5;
				<div class="talk-message__right__subthreads">
					<div class="talk-subthreads-button" @onclick="OnReply">
						<div class="talk-subthreads-button__avatars">
							@foreach (var user in distinctUsers.Take(distinctUsersLimit))
							{
								<TucAvatar User="user" IsSmall="true" />
							}
							@if (distinctUsers.Count > distinctUsersLimit)
							{
								<TucAvatar IsSmall="true"><span style="font-size:14px;">...</span></TucAvatar>
							}
						</div>

						<div class="talk-subthreads-button__count">
							<span style="color:var(--accent-foreground-rest)">
								@(Item.SubThread.Count == 1 ? LOC("1 reply") : LOC("{0} replies", Item.SubThread.Count))
							</span>
						</div>
						<div class="talk-subthreads-button__text">@LOC("view thread")</div>
						<div class="talk-subthreads-button__icon">
							<FluentIcon Value="@TfConstants.GetIcon("ChevronRight").WithColor(Color.Neutral)" />
						</div>
					</div>
				</div>
			}
		</div>
	}
	else
	{
		<div class="talk-message__right">
			<div class="talk-message__right__top">
				<span class="talk-sender">@Item?.User?.Names</span>
				@if (Item.ConnectedDataIdentityValuesCount > 1)
				{
					<span class="talk-multicast">
						<FluentIcon Style="margin-left:5px" Value="@TfConstants.GetIcon("Communication")" Title="@LOC("connected to multiple rows")" />
					</span>
				}
			</div>
			<div class="tf_message_editor">
				<div class="tf_message_editor_content">
					<TucEditor @ref=_editor Placeholder="Type a message in #general" @bind-Value="Item.Content"
							  OnEnter="_onUpdate" />
				</div>
				<div class="tf_message_editor_actions">
					<div class="tf_message_editor_actions_left">
						<span style="color:var(--tf-font-color-mute)">Shift + Enter for new line. Enter to send.</span>
					</div>
					<div class="tf_message_editor_actions_right">
						<FluentButton IconStart="@TfConstants.GetIcon("Save").WithColor(Color.Neutral)" OnClick="_onUpdate"
									  Loading="IsSaving"
									  Disabled="IsSaving"
									  Appearance="@Appearance.Accent">Save</FluentButton>
						<FluentButton OnClick="@OnEditCancel" Appearance="@Appearance.Stealth"
									  Disabled="IsSaving">Cancel</FluentButton>
					</div>
				</div>
			</div>
		</div>
	}
	@if ((!IsSubThread && OnSubThreadView.HasDelegate && Item.VisibleInChannel && Item.ThreadId is not null)
			|| (OnDelete.HasDelegate && Item.User.Id == CurrentUser.Id && Item.DeletedOn is null)
			|| Item.ThreadId is null)
	{
		<div class="talk-message__actions">
			@if (!IsSubThread && OnSubThreadView.HasDelegate && Item.VisibleInChannel && Item.ThreadId is not null)
			{
				<FluentButton IconStart="@TfConstants.GetIcon("ArrowRight")"
							  Appearance="@Appearance.Stealth" Title="@LOC("view thread")"
							  OnClick="@OnSubThreadView" />
			}
			else
			{
				if (OnDelete.HasDelegate && Item.User.Id == CurrentUser.Id && Item.DeletedOn is null)
				{
					<FluentButton IconStart="@TfConstants.GetIcon("Delete").WithColor(Color.Error)"
								  Appearance="@Appearance.Stealth" Title="@LOC("delete message")"
								  OnClick="@OnDelete" />
					<FluentButton IconStart="@TfConstants.GetIcon("Edit")"
								  Appearance="@Appearance.Stealth" Title="@LOC("edit message")"
								  OnClick="@OnEdit" />
				}
				if (Item.ThreadId is null)
				{
					<FluentButton IconStart="@TfConstants.GetIcon("Comment")"
								  Appearance="@Appearance.Stealth" Title="@LOC("reply to message")"
								  OnClick="@OnReply" />
				}
			}
		</div>
	}

</div>
