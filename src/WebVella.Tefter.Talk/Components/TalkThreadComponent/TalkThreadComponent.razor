@namespace WebVella.Tefter.Talk.Components
@using WebVella.Tefter.UI.Components
@inherits TfBaseComponent

@if (_isLoading)
{
	<TucLoadingPane />
}
else if (Channel is null)
{
	<div style="margin:var(--tf-padding-content)">
		<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("No talk channel is selected for this view column!")</FluentMessageBar>
	</div>
}
else if (String.IsNullOrWhiteSpace(Channel.DataIdentity))
{
	<div style="margin:var(--tf-padding-content)">
		<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("The talk channel has no join key set!")</FluentMessageBar>
	</div>
}
else
{
	<div class="talk-panel" style="@Style">
		<div class="talk-panel__left">
			<div class="talk-panel__left__header">
				<div class="talk-channel-label">@($"#{Channel.Name}")</div>
				<div class="talk-panel__left__header_actions">
					@HeaderActions
				</div>
			</div>
			<div class="talk-panel__left__body">
				@if (_threads.Count == 0)
				{
					<div class="talk-panel__left__body__info">
						<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Info">@LOC("No messages in this thread yet")</FluentMessageBar>
					</div>
				}
				else
				{
					<div class="talk-panel__left__body__messages">
						@{
							var channelCssDict = _generateThreadClassDict(_threads);
						}
						@foreach (TalkThread context in _threads)
						{
							if (context.DeletedOn.HasValue && context.SubThread.Count == 0) continue;
							<TalkMessage @key=context.Id
										 Item="context"
										 CurrentUser="Context.CurrentUser"
										 Class="@channelCssDict[context.Id]"
										 IsEdited="@(_threadEditedId == context.Id)"
										 IsSaving=@(_threadIdUpdateSaving == context.Id)
										 OnDelete="@(_ => _deleteThread(context))"
										 OnEdit="@(_ => _editThread(context))"
										 OnReply="@(_ => _replyToThread(context))"
										 OnEditSave="@(x => _saveMessage(context,x))"
										 OnEditCancel="@(_ => _cancelSaveMessage())"
										 OnSubThreadView="@(_ => _onSubThreadView(context))" />
						}
					</div>
				}
			</div>
			<div class="talk-panel__left__footer">
				<div class="talk-editor">
					<TucEditor @ref=_channelEditor Placeholder="@LOC("Message in #{0}", Channel.Name)" @bind-Value="_channelEditorContent" OnEnter="_sendMessage" />
				</div>
				<div class="talk-editor__actions">
					<div class="editor__actions__left"></div>
					<div class="editor__actions__right">
						<FluentButton IconStart="@TfConstants.GetIcon("Send")" OnClick="_sendMessage" Appearance=@Appearance.Accent
									  Loading="_channelEditorSending" Disabled="_channelEditorSending">@LOC("Send")</FluentButton>
					</div>
				</div>
			</div>
		</div>
		<div class="talk-panel__right" style="@(_activeThread is null ? "display:none" : "")">
			@if (_activeThread is not null)
			{
				@if (_activeThread.ConnectedDataIdentityValuesCount > 1)
				{
					<div class="talk-panel__right__header broadcast">
						<div class="talk-panel__right__header-icon">
							<FluentIcon Value="@TfConstants.GetIcon("Communication")" />
						</div>
						<div class="talk-panel__right__header-label">@LOC("Broadcast")</div>
						<div class="talk-panel__right__header-actions">
							<FluentButton Appearance="@Appearance.Stealth"
										  Title=@LOC("close thread")
										  OnClick="_closeActiveThread"
										  IconStart="@TfConstants.GetIcon("Dismiss")" />
						</div>
					</div>
				}
				else
				{
					<div class="talk-panel__right__header">
						<div class="talk-panel__right__header-icon">
							<FluentIcon Value="@TfConstants.GetIcon("CommentMultiple")" />
						</div>
						<div class="talk-panel__right__header-label">@LOC("Thread")</div>
						<div class="talk-panel__right__header-actions">
							<FluentButton Appearance="@Appearance.Stealth"
										  Title=@LOC("close thread")
										  OnClick="_closeActiveThread"
										  IconStart="@TfConstants.GetIcon("Dismiss")" />
						</div>
					</div>
				}
				<div class="talk-panel__right__body">
					<div class="talk-panel__right__body__messages">
						<TalkMessage @key=_activeThread.Id
									 Item="_activeThread"
									 CurrentUser="Context.CurrentUser"
									 Class=""
									 IsEdited="@(_subthreadEditedId == _activeThread.Id)"
									 IsSaving=@(_threadIdUpdateSaving == _activeThread.Id)
									 IsSubThread="true"
									 OnDelete="@(_ => _deleteThread(_activeThread))"
									 OnEdit="@(_ => _editThread(_activeThread,false))"
									 OnReply="@(_ => _replyToThread(_activeThread))"
									 OnEditSave="@(x => _saveMessage(_activeThread,x))"
									 OnEditCancel="@(_ => _cancelSaveMessage())" />

						@if (_activeThread.SubThread is not null && _activeThread.SubThread.Count > 0)
						{
							var visibleThreads = _activeThread.SubThread.Where(x => x.DeletedOn is null).ToList();
							if (visibleThreads.Count > 0)
							{
								<div class="talk-message-separator">
									<div class="talk-message-separator-label">@LOC("{0} replies", visibleThreads.Count)</div>
									<div class="talk-message-separator-ruler"></div>
								</div>
							}
						}
						@{
							var threadCssDict = _generateThreadClassDict(_activeThread.SubThread);
						}
						@foreach (var context in _activeThread.SubThread)
						{
							if (context.DeletedOn.HasValue && context.SubThread.Count == 0) continue;
							<TalkMessage @key=context.Id
										 Item="context"
										 CurrentUser="Context.CurrentUser"
										 Class="@threadCssDict[context.Id]"
										 IsEdited="@(_subthreadEditedId == context.Id)"
										 IsSaving=@(_threadIdUpdateSaving == context.Id)
										 IsSubThread="true"
										 OnDelete="@(_ => _deleteThread(context))"
										 OnEdit="@(_ => _editThread(context,false))"
										 OnReply="@(_ => _replyToThread(context))"
										 OnEditSave="@(x => _saveMessage(context,x))"
										 OnEditCancel="@(_ => _cancelSaveMessage())" />
						}
						<div class="talk-panel__right__body__messages__editor">
							<div class="talk-editor">
								<TucEditor @ref=_threadEditor Placeholder="@LOC("Reply...")" @bind-Value="_threadEditorContent"
										  OnEnter="_replyMessage" />
							</div>
							<div class="talk-editor__actions">
								<div class="editor__actions__left">
									<FluentCheckbox @bind-Value=@_threadVisibleInChannel Label="@LOC("attach to channel")" />
								</div>
								<div class="editor__actions__right">
									<FluentButton IconStart="@TfConstants.GetIcon("Send")" OnClick="_replyMessage" Appearance=@Appearance.Accent
												  Loading="_threadEditorSending" Disabled="_threadEditorSending">@LOC("Send")</FluentButton>
								</div>
							</div>
						</div>

					</div>
				</div>
			}
		</div>
	</div>
}

