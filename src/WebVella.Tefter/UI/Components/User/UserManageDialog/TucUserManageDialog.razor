@namespace WebVella.Tefter.UI.Components
@inherits TfFormBaseComponent
@* Header *@
<FluentDialogHeader ShowDismiss="true">
	<FluentLabel Typo="Typography.PaneHeader">@_title</FluentLabel>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
	@if (String.IsNullOrWhiteSpace(_error))
	{
		<FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="_iconBtn"
		              Loading="_isSubmitting" Disabled="_isSubmitting">@_btnText</FluentButton>
	}
	<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Cancel")</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
	@if (!string.IsNullOrWhiteSpace(_error))
	{
		<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@_error</FluentMessageBar>
	}
	else
	{
		<FluentEditForm EditContext="EditContext" OnValidSubmit="_save"
		                FormName="submit-form" class="tf-form" novalidate>
			<DataAnnotationsValidator/>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Email" @bind-Value=@_form.Email
					                 Label="@LOC("Email")" Style="width:100%" AutoComplete="off"/>
					<FluentValidationMessage For="@(() => _form.Email)"/>
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentInputLabel Label="@LOC("Status")"/>
					<FluentCheckbox @bind-Value=@_form.Enabled Label="@LOC("Enabled")" Style="height:32px;"/>
					<FluentValidationMessage For="@(() => _form.Enabled)"/>
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@_form.FirstName
					                 Label="@LOC("First Name")" Style="width:100%" AutoComplete="off"/>
					<FluentValidationMessage For="@(() => _form.FirstName)"/>
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@_form.LastName
					                 Label="@LOC("Last Name")" Style="width:100%" AutoComplete="off"/>
					<FluentValidationMessage For="@(() => _form.LastName)"/>
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Password" @bind-Value=@_form.Password
					                 Label="@LOC("Password")" Style="width:100%" AutoComplete="new-password"/>
					<FluentValidationMessage For="@(() => _form.Password)"/>
				</FluentGridItem>
				<FluentGridItem xs="6">
					@if (!_isCreate && String.IsNullOrWhiteSpace(_form.Password))
					{
						<FluentTextField TextFieldType="@TextFieldType.Text"
						                 Value="@LOC("leave empty too keep the password")"
						                 Label="@LOC("Confirm Password")" Disabled="true"
						                 Style="width:100%" AutoComplete="new-password"/>
					}
					else
					{
						<FluentTextField TextFieldType="@TextFieldType.Password" @bind-Value=@_form.ConfirmPassword
						                 Label="@LOC("ConfirmPassword")" AutoComplete="new-password"
						                 Style="width:100%"/>
					}
					<FluentValidationMessage For="@(() => _form.ConfirmPassword)"/>
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<TucSelect SelectedOption="@_form.ThemeMode"
					           SelectedOptionChanged="((x) => _form.ThemeMode = x)"
					           TOption="DesignThemeModes"
					           Items="@(Enum.GetValues<DesignThemeModes>())" Style="width:100%"
					           OptionValue="@(p => ((int)p).ToString())"
					           OptionText="@(p => p.ToString())" Label="@LOC("Theme Mode")"/>
					<FluentValidationMessage For="@(() => _form.ThemeMode)"/>
				</FluentGridItem>
				<FluentGridItem xs="6">
					<TucSelect SelectedOption="@_form.Culture"
					           SelectedOptionChanged="((x) => _form.Culture = x)"					           
					           TOption="TfCultureOption"
					           Items="@TfConstants.CultureOptions" Style="width:100%"
					           OptionValue="@(p => p.CultureName)"
					           OptionText="@(p => p.CultureInfo.NativeName)" Label="@LOC("Localization")"/>
					<FluentValidationMessage For="@(() => _form.Culture)"/>
				</FluentGridItem>
			</FluentGrid>
		</FluentEditForm>
	}
</FluentDialogBody>
