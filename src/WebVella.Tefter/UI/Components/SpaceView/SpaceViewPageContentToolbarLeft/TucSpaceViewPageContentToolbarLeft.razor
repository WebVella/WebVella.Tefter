@namespace WebVella.Tefter.UI.Components
@inherits TfBaseComponent

<FluentButton Id="select-all-menu-toggler"
			  OnClick="@(() => _selectAllMenuVisible = !_selectAllMenuVisible)" Title="@LOC("select all")" Appearance="@Appearance.Outline"
			  Loading="SelectAllLoading">

	@if (SelectedRows.Count > 0)
	{
		<FluentBadge Appearance="Appearance.Accent">@SelectedRows.Count</FluentBadge>
		<FluentIcon Value="@TfConstants.GetIcon("CheckmarkStarburst")" Slot="start" Color="@Color.Accent" />
	}
	else
	{
		<FluentIcon Value="@TfConstants.GetIcon("CheckmarkStarburst")" Color="@Color.Accent" />
	}
</FluentButton>
<FluentMenu Width="200" @bind-Open="_selectAllMenuVisible" Anchor="select-all-menu-toggler" UseMenuService="false">
	<FluentMenuItem OnClick="@OnSelectAllClick">select all</FluentMenuItem>
	<FluentMenuItem OnClick="@OnDeSelectAllClick">deselect all</FluentMenuItem>
</FluentMenu>

<FluentSearch Value="@_navState.Search" ValueChanged="_searchChanged" AutoComplete="off" Placeholder="@LOC("search...")" />
<FluentButton Id="view-filter-selector" OnClick="OnFilterClick" Title="data filters" Appearance="@Appearance.Outline">
	@if ((_navState.Filters?.Count ?? 0) > 0)
	{
		<FluentIcon Value="@TfConstants.GetIcon("DataFunnel")" Slot="start" Color="@Color.Accent" />
		<FluentBadge Appearance="Appearance.Accent">@(_navState.Filters?.Count ?? 0)</FluentBadge>
	}
	else
	{
		<FluentIcon Value="@TfConstants.GetIcon("DataFunnel")" Color="@Color.Accent" />
	}
</FluentButton>
<FluentButton Id="view-sort-selector" OnClick="OnSortClick" Title="data sort" Appearance="@Appearance.Outline">
	@if ((_navState.Sorts?.Count ?? 0) > 0)
	{
		<FluentIcon Value="@TfConstants.GetIcon("ArrowSortDownLines")" Slot="start" Color="@Color.Accent" />
		<FluentBadge Appearance="Appearance.Accent">@(_navState.Sorts?.Count ?? 0)</FluentBadge>
	}
	else
	{
		<FluentIcon Value="@TfConstants.GetIcon("ArrowSortDownLines")" Color="@Color.Accent" />
	}
</FluentButton>
@if (_showClearFilter)
{
	<FluentButton OnClick="OnClearFilterClick" Title="@LOC("clear filters and sort")" Appearance="@Appearance.Outline">
		<FluentIcon Value="@TfConstants.GetIcon("FilterDismiss")" Color="@Color.Error" />
	</FluentButton>
}
@* 		<FluentButton Id="grid-properties-selector" OnClick="OnGridPropertiesClick" Title="grid properties" Appearance="@Appearance.Outline">
		<FluentIcon Value="@TfConstants.GetIcon("TableSettings")" Color="@Color.Accent" />
		</FluentButton> *@
@if (_hasViewPersonalization)
{
	<div class="tf-hover-switch">
		<div class="tf-hover-switch__unhover">
			<FluentButton OnClick="OnClearPersonalizationClick" Title="@LOC("this view was personalized.Click to remove the personalization")"
						  Appearance="@Appearance.Outline"
						  IconStart="@TfConstants.GetIcon("PersonEdit")!.WithColor(Color.Warning)" />
		</div>
		<div class="tf-hover-switch__hover">
			<FluentButton OnClick="OnClearPersonalizationClick" Title="@LOC("this view was personalized.Click to remove the personalization")"
						  Appearance="@Appearance.Outline"
						  IconStart="@TfConstants.GetIcon("Dismiss")!.WithColor(Color.Error)" />
		</div>
	</div>
}

