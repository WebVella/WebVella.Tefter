@namespace WebVella.Tefter.UI.Components
@inherits TfBaseComponent
@if (_spaceView is null)
{
	<div style="@("padding:var(--tf-layout-content-padding)")">
		<FluentMessageBar Title="No space view found"
						  Style="@("border: 1px solid var(--neutral-base-color)")"
						  Intent="MessageIntent.Info"
						  AllowDismiss="false">
			Space view not found
		</FluentMessageBar>
	</div>
}
else
{
	var configCss = _generateColumnConfigurationCss(_spaceView, _spaceViewColumns);
	var columnIndex = 1;
	<TucPageLayout ShowToolbar=@(_spaceView.Presets.Count > 0) Title="@_spaceView.Name" Icon="@TfConstants.SpaceViewIcon" Color="@_space!.Color">
		<Toolbar>
			<TucSpaceViewPageContentNavigation SpaceView="_spaceView" />
		</Toolbar>
		<ChildContent>
			@((MarkupString)_getEmbeddedStyles())
			@* 			<TucPageHeader Title="@_spacePage!.Name" Icon="TfConstants.GetIcon(_spacePage.FluentIconName)"
						   Area="@_space!.Name" IconColor="_space!.Color" SubTitle="@_preset?.Name" /> *@
			<TucSpaceViewPageContentToolbar SpaceView="_spaceView" Data=_data
											SpaceData="_spaceData"
											OnSearch="_onSearch" OnFilter="_onFilter" OnSort="_onSort" OnClearFilter="_onClearFilter"
											OnSelectAll="_onSelectAll" SelectAllLoading="_selectAllLoading" OnDeSelectAll="_onDeSelectAll"
											SelectedRows="_selectedDataRows" />
			<div class="tf-grid-wrapper">
				<table class="tf-grid">
					<colgroup>
						@foreach (var index in configCss.Keys)
						{
							<col span="1" style="@(configCss[index].Item1 is null ? "" : $"width: {configCss[index].Item1!.Value}px;min-width:{configCss[index].Item1!.Value}px")">
						}
					</colgroup>
					<thead class="tf-grid-thead">
						<tr class="tf-grid-thead-bkg"></tr>
						@if (_isDataLoading)
						{
							<tr class="tf-grid-thead-loading"></tr>
						}
						<tr class="tf-grid-tr">
							<th class="tf-grid-th tf-grid-th--check @configCss[0].Item2" style="@($"{configCss[0].Item3}")">
								<div class="check-content">
									@if (_allDataRowsSelected())
									{
										<FluentButton OnClick="@(() => _toggleSelectAll(false))" BackgroundColor="transparent" Color="transparent">
											<FluentIcon Value="@TfConstants.GetIcon("CheckboxChecked", variant: IconVariant.Filled)" Color="@Color.Accent" />
										</FluentButton>
									}
									else
									{
										<FluentButton OnClick="@(() => _toggleSelectAll(true))" BackgroundColor="transparent" Color="transparent">
											<FluentIcon Value="@TfConstants.GetIcon("CheckboxUnchecked")" Color="@Color.Custom" CustomColor="var(--neutral-stroke-input-active)" />
										</FluentButton>
									}
								</div>
							</th>
							@foreach (var column in _spaceViewColumns.OrderBy(x => x.Position))
							{
								<th data-query-name="@column.QueryName" class="tf-grid-th @configCss[columnIndex].Item2" style="@($"{column.HeaderStyle}{configCss[columnIndex].Item3}")">
									<div>
										@if (String.IsNullOrWhiteSpace(column.Icon))
										{
											<div>@column.Title</div>

										}
										else if (column.OnlyIcon)
										{
											<div style="display:flex;">
												<FluentIcon Value="@TfConstants.GetIcon(column.Icon)" />
											</div>
										}
										else
										{
											<div style="display:flex">
												<FluentIcon Value="@TfConstants.GetIcon(column.Icon)" />
												<div style="padding-left:5px;">@column.Title</div>
											</div>
										}
									</div>
								</th>
								columnIndex++;
							}
						</tr>
					</thead>
					<tbody class="tf-grid-tbody">
						@if (_data is null)
						{
							<tr class="tf-grid-tr">
								<td class="tf-grid-td" colspan="@(_spaceViewColumns.Count + 1)"><div>@LOC("Dataset or DataProvider not found")</div></td>
							</tr>
						}
						else if (_data.Rows.Count == 0)
						{
							<tr class="tf-grid-tr">
								<td class="tf-grid-td" colspan="@(_spaceViewColumns.Count + 1)"><div>@LOC("No data")</div></td>
							</tr>
						}
						else
						{
							for (int i = 0; i < _data.Rows.Count; i++)
							{
								var index = i;
								columnIndex = 1;
								var selected = _getItemSelection(index);
								<tr @key=@index class="@($"tf-grid-tr {(selected ? "tf-grid-tr--selected" : "")}")">
									<td class="tf-grid-td tf-grid-td--check @configCss[0].Item2" style="@($"{configCss[0].Item3}")">
										<div class="tf-grid-td-selection"></div>
										<div class="tf-grid-td-hover"></div>
										<div class="check-content">
											@if (_data.Rows[i][TfConstants.TEFTER_ITEM_ID_PROP_NAME] is not null)
											{
												@if (selected)
												{
													<FluentButton OnClick="@(() => _toggleItemSelection(index, false))" BackgroundColor="transparent" Color="transparent">
														<FluentIcon Value="@TfConstants.GetIcon("CheckboxChecked", variant: IconVariant.Filled)" Color="@Color.Accent" />
													</FluentButton>
												}
												else
												{
													<FluentButton OnClick="@(() => _toggleItemSelection(index, true))" BackgroundColor="transparent" Color="transparent">
														<FluentIcon Value="@TfConstants.GetIcon("CheckboxUnchecked")" Color="@Color.Custom" CustomColor="var(--neutral-stroke-input-active)" />
													</FluentButton>
												}
											}
										</div>

									</td>
									@foreach (var column in _spaceViewColumns)
									{
										<td class="tf-grid-td @configCss[columnIndex].Item2" style="@($"{column.CellColorStyle}{configCss[columnIndex].Item3}")">
											<div class="tf-grid-td-color" style="@column.CellFillColorStyle"></div>
											<div class="tf-grid-td-selection"></div>
											<div class="tf-grid-td-hover"></div>
											@if (_componentMetaDict.ContainsKey(column.ComponentId))
											{
												<TucErrorBoundry ShowErrorDetails=false>
													<DynamicComponent Type="_componentMetaDict[column.ComponentId].Instance.GetType()" Parameters="@_getColumnComponentContext(column, _data, index)" />
												</TucErrorBoundry>
											}
										</td>
										columnIndex++;
									}
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
			<div class="tf-grid__pager" style="padding:0 var(--tf-layout-content-padding)">
				<TucPager Page="@_page" PageSize="@_pageSize"
						  GoLast="@_goLastPage" GoNext="@_goNextPage"
						  GoFirst="@_goFirstPage" GoPrevious="@_goPreviousPage" GoOnPage="@_goOnPage" ChangePageSize="_pageSizeChange" />
			</div>
		</ChildContent>
	</TucPageLayout>
}
