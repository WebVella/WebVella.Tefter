@namespace WebVella.Tefter.UI.Components
@inherits TfBaseComponent

<div class="content-toolbar">
	<div class="content-toolbar__left">

		<FluentButton Id="select-all-menu-toggler"
					  OnClick="@(() => _selectAllMenuVisible = !_selectAllMenuVisible)" Title="@LOC("select all")" Appearance="@Appearance.Outline"
					  Loading="SelectAllLoading">

			@if (SelectedRows.Count > 0)
			{
				<FluentBadge Appearance="Appearance.Accent">@SelectedRows.Count</FluentBadge>
				<FluentIcon Value="@TfConstants.GetIcon("CheckmarkStarburst")" Slot="start" Color="@Color.Accent" />
			}
			else
			{
				<FluentIcon Value="@TfConstants.GetIcon("CheckmarkStarburst")" Color="@Color.Accent" />
			}
		</FluentButton>
		<FluentMenu Width="200" @bind-Open="_selectAllMenuVisible" Anchor="select-all-menu-toggler" UseMenuService="false">
			<FluentMenuItem OnClick="@OnSelectAllClick">select all</FluentMenuItem>
			<FluentMenuItem OnClick="@OnDeSelectAllClick">deselect all</FluentMenuItem>
		</FluentMenu>

		<FluentSearch Value="@_navState.Search" ValueChanged="_searchChanged" AutoComplete="off" Placeholder="@LOC("search...")" />
		<FluentButton Id="view-filter-selector" OnClick="OnFilterClick" Title="data filters" Appearance="@Appearance.Outline">
			@if ((_navState.Filters?.Count ?? 0) > 0)
			{
				<FluentIcon Value="@TfConstants.GetIcon("DataFunnel")" Slot="start" Color="@Color.Accent" />
				<FluentBadge Appearance="Appearance.Accent">@(_navState.Filters?.Count ?? 0)</FluentBadge>
			}
			else
			{
				<FluentIcon Value="@TfConstants.GetIcon("DataFunnel")" Color="@Color.Accent" />
			}
		</FluentButton>
		<FluentButton Id="view-sort-selector" OnClick="OnSortClick" Title="data sort" Appearance="@Appearance.Outline">
			@if ((_navState.Sorts?.Count ?? 0) > 0)
			{
				<FluentIcon Value="@TfConstants.GetIcon("ArrowSortDownLines")" Slot="start" Color="@Color.Accent" />
				<FluentBadge Appearance="Appearance.Accent">@(_navState.Sorts?.Count ?? 0)</FluentBadge>
			}
			else
			{
				<FluentIcon Value="@TfConstants.GetIcon("ArrowSortDownLines")" Color="@Color.Accent" />
			}
		</FluentButton>
		@if (_showClearFilter)
		{
			<FluentButton OnClick="OnClearFilterClick" Title="@LOC("clear filters and sort")" Appearance="@Appearance.Outline">
				<FluentIcon Value="@TfConstants.GetIcon("FilterDismiss")" Color="@Color.Error" />
			</FluentButton>
		}
		@* 		<FluentButton Id="grid-properties-selector" OnClick="OnGridPropertiesClick" Title="grid properties" Appearance="@Appearance.Outline">
		<FluentIcon Value="@TfConstants.GetIcon("TableSettings")" Color="@Color.Accent" />
		</FluentButton> *@
		@if (_hasViewPersonalization)
		{
			<div class="tf-hover-switch">
				<div class="tf-hover-switch__unhover">
					<FluentButton OnClick="OnClearPersonalizationClick" Title="@LOC("this view was personalized.Click to remove the personalization")"
								  Appearance="@Appearance.Outline"
								  IconStart="@TfConstants.GetIcon("PersonEdit")!.WithColor(Color.Warning)" />
				</div>
				<div class="tf-hover-switch__hover">
					<FluentButton OnClick="OnClearPersonalizationClick" Title="@LOC("this view was personalized.Click to remove the personalization")"
								  Appearance="@Appearance.Outline"
								  IconStart="@TfConstants.GetIcon("Dismiss")!.WithColor(Color.Error)" />
				</div>
			</div>
		}
	</div>
	<div class="content-toolbar__right">
		<TucScreenRegionComponent RegionContext="@(new TfSpaceViewToolBarActionScreenRegionContext())" />
		@if (SpaceView.Settings.CanCreateRows)
		{
			<FluentButton OnClick="_onAddRowClick" Appearance="@Appearance.Outline">
				<FluentIcon Value="@TfConstants.GetIcon("Add")" Color="@Color.Accent" />
			</FluentButton>
		}
		<FluentButton Id="view-action-selector" OnClick="OnActionClick" Appearance="@Appearance.Outline">
			<FluentIcon Value="@TfConstants.GetIcon("Connector")" Color="@Color.Accent" />
		</FluentButton>
		@if (_activeBookmark is not null)
		{
			<FluentButton Id="view-bookmark-selector" OnClick="OnBookmarkClick" Appearance="@Appearance.Outline">
				<FluentIcon Value="@TfConstants.GetIcon("Bookmark")" Color="@Color.Accent" />
			</FluentButton>
		}
		@if (_activeSavedUrl is not null)
		{
			@if (Navigator.IsSpaceViewSavedUrlChanged(_activeSavedUrl.Url))
			{
				<FluentButton Id="view-save-selector" OnClick="OnSaveLinkClick" Appearance="@Appearance.Outline">
					<FluentIcon Value="@TfConstants.GetIcon("Link")" Color="@Color.Warning" />
				</FluentButton>
			}
			else
			{
				<FluentButton Id="view-save-selector" OnClick="OnSaveLinkClick" Appearance="@Appearance.Outline">
					<FluentIcon Value="@TfConstants.GetIcon("Link")" Color="@Color.Accent" />
				</FluentButton>
			}
		}
		<FluentButton Id="view-export-selector" OnClick="OnExportClick" Appearance="@Appearance.Outline">
			<FluentIcon Value="@TfConstants.GetIcon("ShareAndroid")" Color="@Color.Accent" />
		</FluentButton>
		@if (Context.CurrentUser.IsAdmin)
		{
			<FluentButton Id="view-setting-selector" OnClick="OnSettingsClick" Appearance="@Appearance.Outline">
				<FluentIcon Value="@TfConstants.GetIcon("Settings")" Color="@Color.Accent" />
			</FluentButton>
		}
	</div>
</div>
@* <TucSpaceViewPropertiesSelector @ref="_propertiesSelector" />  *@
<TucSpaceViewSettingsSelector @ref="_settingSelector" SpaceView="SpaceView" Data="Data" SelectedRows="SelectedRows" />
<TucSpaceViewActionSelector @ref="_actionSelector" SpaceView="SpaceView" SpaceData="SpaceData" User=Context.CurrentUser Data="Data" SelectedRows="SelectedRows" />
<TucSpaceViewShareSelector @ref="_shareSelector" SpaceView="SpaceView" Data="Data" SelectedRows="SelectedRows" ActiveBookmark="_activeBookmark" ActiveSavedUrl="_activeSavedUrl" />
<TucSpaceViewBookmarkSelector @ref="_bookmarkSelector" SpaceView="SpaceView" Data="Data" SelectedRows="SelectedRows" ActiveBookmark="_activeBookmark" ActiveSavedUrl="_activeSavedUrl" />
<TucSpaceViewLinkSaveSelector @ref="_saveSelector" SpaceView="SpaceView" Data="Data" SelectedRows="SelectedRows" ActiveBookmark="_activeBookmark" ActiveSavedUrl="_activeSavedUrl" />
