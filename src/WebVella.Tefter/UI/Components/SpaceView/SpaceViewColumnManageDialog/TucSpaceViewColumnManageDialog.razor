@namespace WebVella.Tefter.UI.Components
@inherits TfFormBaseComponent
<div>
	@* Header *@
	<FluentDialogHeader ShowDismiss="true">
		<FluentLabel Typo="Typography.PaneHeader">@_title</FluentLabel>
	</FluentDialogHeader>

	@* Body *@
	<FluentDialogBody>

		<FluentEditForm EditContext="EditContext" OnValidSubmit="_save"
						FormName="submit-form" class="tf-form" novalidate>
			<DataAnnotationsValidator />
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@_form.Title
									 Label="@LOC("Title")" Style="width:100%" AutoComplete="off"/>
					<FluentValidationMessage For="@(() => _form.Title)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@_form.QueryName
									 Label="@LOC("Query Name")" Style="width:100%" AutoComplete="off" />
					<FluentValidationMessage For="@(() => _form.QueryName)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="4">
					<FluentInputLabel Label="@LOC("Icon")" />
					<TucSelectIcon @bind-Value=@_form.Icon />
					<FluentValidationMessage For="@(() => _form.Icon)" />
				</FluentGridItem>
				<FluentGridItem xs="2">
					<FluentInputLabel Label="@LOC("Only icon")" />
					<FluentSwitch @bind-Value=@_form.OnlyIcon/>
					<FluentValidationMessage For="@(() => _form.OnlyIcon)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentNumberField TValue="short?" @bind-Value=@_form.Position AutoComplete="off"
									   Label="@LOC("Insert in position")" Style="width:100%" Placeholder="@LOC("leave empty for last")" />
					<FluentValidationMessage For="@(() => _form.Position)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentInputLabel Label="@LOC("Column type")" />
					<FluentStack HorizontalGap="5">
						@if (String.IsNullOrWhiteSpace(_selectedColumnType?.Instance.AddonFluentIconName))
						{
							<FluentButton Appearance="@Appearance.Outline" />
						}
						else
						{
							<FluentButton Appearance="@Appearance.Outline" IconStart="@TfConstants.GetIcon(_selectedColumnType!.Instance.AddonFluentIconName)" />
						}
						<FluentSelect Style="width:100%"
									  TOption="TfSpaceViewColumnTypeAddonMeta"
									  Placeholder="@LOC("select...")"
									  OptionSelected="(x => x.Instance.AddonId == _form.TypeId)"
									  SelectedOption="@_selectedColumnType"
									  SelectedOptionChanged="_columnTypeChangeHandler"
									  OptionText="((x)=> x.Instance.AddonName)"
									  OptionValue="((x)=> x.Instance.AddonId.ToString())"
									  Items="_availableColumnTypes">
							<OptionTemplate Context="option">
								<FluentStack>
									@if (!String.IsNullOrWhiteSpace(option.Instance.AddonFluentIconName))
									{
										<FluentIcon Value="@TfConstants.GetIcon(option.Instance.AddonFluentIconName)" Color="@Color.Accent" />
									}
									@option.Instance.AddonName
								</FluentStack>
							</OptionTemplate>
						</FluentSelect>
					</FluentStack>
					<FluentValidationMessage For="@(() => _form.TypeId)" />
				</FluentGridItem>
			</FluentGrid>
			<TucDivider Style="margin:15px 0" Title="@LOC("Data mapping")" />
			@if (_selectedColumnType is not null && _selectedColumnComponent is not null)
			{
				@if (_selectedColumnType.Instance.DataMapping is not null
							&& _selectedColumnType.Instance.DataMapping.Count > 0)
				{
					foreach (var item in _selectedColumnType.Instance.DataMapping)
					{
						<FluentGrid>
							<FluentGridItem xs="6">
								<FluentTextField TextFieldType="@TextFieldType.Text" Value=@item.Alias Immediate ImmediateDelay="500"
												 Disabled="true" Label="@LOC("Component alias")" Style="width:100%" AutoComplete="off" />
							</FluentGridItem>
							<FluentGridItem xs="6">
								<FluentCombobox TOption="string"
												Autocomplete="ComboboxAutocomplete.Both"
												Items="_options"
												Height="@TfConstants.ComboPanelHeight"
												Value=@_getDataMappingValue(item.Alias)
												Immediate ImmediateDelay="500" ValueChanged="@((x) => _dataMappingValueChanged(new Tuple<string,string>(item.Alias,x)))"
												Label="@LOC("Data column name")" Style="width:100%" />
							</FluentGridItem>
						</FluentGrid>
					}
				}
				else
				{
					<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("This component does not require data mapping")" AllowDismiss="false" />
				}
			}
			else
			{
				<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("Please select data provider first")" AllowDismiss="false" />
			}
			<FluentValidationMessage For="@(() => _form.DataMapping)" />
			<TucDivider Style="margin:15px 0" Title="@LOC("Styling")" />
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentNumberField TValue="short?" @bind-Value="_form.Settings.Width" AutoComplete="off"
									   Label="@LOC("Width, px")" Style="width:100%" Placeholder="@LOC("auto")" />
					<FluentValidationMessage For="@(() => _form.Settings.Width)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentInputLabel Label="@LOC("Color")" />
					<TucSelectColor @bind-Value=@_form.Settings.Color />
					<FluentValidationMessage For="@(() => _form.Settings.Color)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentInputLabel Label="@LOC("Background Color")" />
					<TucSelectColor @bind-Value=@_form.Settings.BackgroundColor />
					<FluentValidationMessage For="@(() => _form.Settings.BackgroundColor)" />
				</FluentGridItem>
			</FluentGrid>
			<TucDivider Style="margin:15px 0" Title="@LOC("Display component")" />
			@if (_renderComponentTypeSelect)
			{
				<FluentGrid>
					<FluentGridItem xs="6">
						<FluentSelect Label="@LOC("Display component")"
									  Style="width:100%" Required=true
									  OptionSelected="(x => x.AddonId == _form.ComponentId)"
									  SelectedOption="@_selectedColumnComponent"
									  SelectedOptionChanged="_columnComponentChangeHandler"
									  TOption="ITfSpaceViewColumnComponentAddon"
									  OptionText="((x)=> x.AddonName)"
									  OptionValue="((x)=> x.AddonId.ToString())"
									  Items="_selectedColumnTypeComponents" />

						<FluentValidationMessage For="@(() => _form.ComponentId)" />
					</FluentGridItem>
				</FluentGrid>
			}
			else
			{
				<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("Please select column type first")" AllowDismiss="false" />
			}
			@if (_selectedColumnType is not null && _selectedColumnComponent is not null)
			{
				<FluentGrid>
					<FluentGridItem xs="12">
						@if (_selectedColumnComponent is not null)
						{
							<TucErrorBoundry>
								<DynamicComponent Type="_selectedColumnComponent.GetType()" Parameters="@_getColumnComponentContext()" />
							</TucErrorBoundry>
						}
						else
						{
							<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning" Title="@LOC("Warning")">
								<div>@LOC(" Data provider settings component does not implement ITfDataProviderSettings and cannot be rendered!")</div>
							</FluentMessageBar>
						}
					</FluentGridItem>
				</FluentGrid>
			}
			else
			{
				<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("Please select data provider first")" AllowDismiss="false" />
			}
			<TucDivider Style="margin:15px 0" Title="@LOC("Edit Mode component")" />
			@if (_renderComponentTypeSelect)
			{
				<FluentGrid>
					<FluentGridItem xs="6">
						<FluentSelect Label="@LOC("Edit component")"
									  Style="width:100%" Required=true
									  OptionSelected="(x => x.AddonId == _form.EditComponentId)"
									  SelectedOption="@_selectedEditColumnComponent"
									  SelectedOptionChanged="_columnEditComponentChangeHandler"
									  TOption="ITfSpaceViewColumnComponentAddon"
									  OptionText="((x)=> x.AddonName)"
									  OptionValue="((x)=> x.AddonId.ToString())"
									  Items="_selectedColumnTypeComponents" />
						<FluentValidationMessage For="@(() => _form.EditComponentId)" />
					</FluentGridItem>
				</FluentGrid>
			}
			else
			{
				<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("Please select column type first")" AllowDismiss="false" />
			}
			@if (_selectedColumnType is not null && _selectedEditColumnComponent is not null)
			{
				<FluentGrid>
					<FluentGridItem xs="12">
						@if (_selectedEditColumnComponent is not null)
						{
							<TucErrorBoundry>
								<DynamicComponent Type="_selectedEditColumnComponent.GetType()" Parameters="@_getColumnEditComponentContext()" />
							</TucErrorBoundry>
						}
						else
						{
							<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning" Title="@LOC("Warning")">
								<div>@LOC(" Data provider settings component does not implement ITfDataProviderSettings and cannot be rendered!")</div>
							</FluentMessageBar>
						}
					</FluentGridItem>
				</FluentGrid>
			}
			else
			{
				<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("Please select data provider first")" AllowDismiss="false" />
			}
		</FluentEditForm>
	</FluentDialogBody>

	@* Footer *@
	<FluentDialogFooter>
		@if (String.IsNullOrWhiteSpace(_error))
		{
			<FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="_iconBtn"
						  Loading="_isSubmitting" Disabled="_isSubmitting">@_btnText</FluentButton>
		}
		<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Cancel")</FluentButton>
	</FluentDialogFooter>
</div>