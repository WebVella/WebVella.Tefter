@namespace WebVella.Tefter.UI.Components
@inherits TfBaseComponent
@* Header *@
<FluentDialogHeader Style="display: none"></FluentDialogHeader>

@* Footer *@
<FluentDialogFooter Style="display: none"></FluentDialogFooter>

@* Body *@
<FluentDialogBody Style="padding:0 !important;">
    <div class="tf-import-wizard">
        <div class="tf-import-wizard__aside">
            <div class="tf-import-wizard__aside__header">
                <div class="tf-import-wizard__aside__header__left">@LOC("Files:")</div>
                <div class="tf-import-wizard__aside__header__right">
                    @if (_statDict[Guid.Empty.ToString()].ProcessedError > 0)
                    {
                        <div class="tf-import-wizard__aside__header__right__count">
                            <FluentIcon
                                Value="@TfConstants.GetIcon("ErrorCircle")!.WithColor(TfColor.Red500.GetColor().HEX)"/>
                            <span
                                class="tf-import-wizard__aside__header__right__count__number">@_statDict[Guid.Empty.ToString()].ProcessedError</span>
                        </div>
                    }
                    @if (_statDict[Guid.Empty.ToString()].ProcessedWarning > 0)
                    {
                        <div class="tf-import-wizard__aside__header__right__count">
                            <FluentIcon
                                Value="@TfConstants.GetIcon("Warning")!.WithColor(TfColor.Orange500.GetColor().HEX)"/>
                            <span
                                class="tf-import-wizard__aside__header__right__count__number">@_statDict[Guid.Empty.ToString()].ProcessedWarning</span>
                        </div>
                    }
                    @if (_statDict[Guid.Empty.ToString()].ProcessedSuccess > 0)
                    {
                        <div class="tf-import-wizard__aside__header__right__count">
                            <FluentIcon
                                Value="@TfConstants.GetIcon("CheckmarkCircle")!.WithColor(TfColor.Green500.GetColor().HEX)"/>
                            <span
                                class="tf-import-wizard__aside__header__right__count__number">@_statDict[Guid.Empty.ToString()].ProcessedSuccess</span>
                        </div>
                    }
                </div>
            </div>
            <div class="tf-import-wizard__aside__content">
                <TucTreeView Items="_menu"/>
            </div>
            <div class="tf-import-wizard__aside__footer">
                <FluentButton Appearance="Appearance.Outline" OnClick="@_cancel" Disabled="@_isProcessing">@LOC("Close")</FluentButton>
            </div>
        </div>
        <div class="tf-import-wizard__content">
            <div class="tf-import-wizard__content__header">
                <div class="tf-import-wizard__content__header__left">
                    <div style="padding-left:5px">@_selectedItem.FileName</div>
                </div>
                <div class="tf-import-wizard__content__header__center">
                    @if (_selectedItem.Status == TfImportFileToPageContextItemStatus.Processing)
                    {
                        <div
                            style="color:@_selectedItem.GetStatusColor().GetColor().HEX">@LOC(_selectedItem.Status.ToDescriptionString())</div>
                    }
                </div>
                <div class="tf-import-wizard__content__header__right">
                    @if (_statDict[_selectedItem.LocalPath].ProcessedError > 0)
                    {
                        <div class="tf-import-wizard__aside__header__right__count">
                            <FluentIcon
                                Value="@TfConstants.GetIcon("ErrorCircle")!.WithColor(TfColor.Red500.GetColor().HEX)"/>
                            <span class="tf-import-wizard__aside__header__right__count__number">@_statDict[_selectedItem.LocalPath].ProcessedError</span>
                        </div>
                    }
                    @if (_statDict[_selectedItem.LocalPath].ProcessedWarning > 0)
                    {
                        <div class="tf-import-wizard__aside__header__right__count">
                            <FluentIcon
                                Value="@TfConstants.GetIcon("Warning")!.WithColor(TfColor.Orange500.GetColor().HEX)"/>
                            <span class="tf-import-wizard__aside__header__right__count__number">@_statDict[_selectedItem.LocalPath].ProcessedWarning</span>
                        </div>
                    }
                </div>
            </div>
            <div class="tf-import-wizard__content__subheader"></div>
            <div class="tf-import-wizard__content__body">
                @if (_context.Items.Count == 0)
                {
                    <FluentMessageBar AllowDismiss="false"
                                      Intent="MessageIntent.Info">@LOC("No files are found for import")</FluentMessageBar>
                }
                else if (_selectedItem.IsError)
                {
                    <FluentMessageBar AllowDismiss="false"
                                      Intent="MessageIntent.Error">@_selectedItem.Message</FluentMessageBar>
                }
                else if (_selectedItem.ProcessLog.Count > 0)
                {
                    <div class="tf-console-box">
                        @foreach (var context in _selectedItem.ProcessLog)
                        {
                            <div class="tf-console-box__row" id="@context.Id">
                                <div class="tf-console-box__row__date">
                                    [@context.Timestamp.ToString(TfConstants.DateTimeFormat)]
                                </div>
                                <div class="tf-console-box__row__message" style="@(context.Color is null ? "" : $"color:{context.Color.GetColor().HEX}")">
                                    @if (context.Type == TfProgressStreamItemType.Error)
                                    {
                                        <span style="@($"color:{context.Color.GetColor().HEX}")">[ERROR] </span>
                                    }
                                    else if (context.Type == TfProgressStreamItemType.Warning)
                                    {
                                        <span style="@($"color:{context.Color.GetColor().HEX}")">[WARNING] </span>
                                    }                       
                                    else if (context.Type == TfProgressStreamItemType.Success)
                                    {
                                        <span style="@($"color:{context.Color.GetColor().HEX}")">[SUCCESS] </span>
                                    }                                                
                                    <span
                                        style="@(context.Color is null ? "" : context.Color.Value.GetColor().HEX)">@context.Message</span>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div>@LOC("Processing the file about to start...")</div>
                }
            </div>
        </div>
    </div>
</FluentDialogBody>