@namespace WebVella.Tefter.UI.Components
@inherits TfBaseComponent
@if (_isReadonly)
{
	<FluentTextField ReadOnly="true" Value="@Value.ToString()" Style="width:100%">
		@if (Value is null)
		{
			<FluentIcon Slot="start" Value="@TfConstants.GetIcon("RectangleLandscape")"
						Color="Color.Neutral" />
		}
		else
		{
			<FluentIcon Slot="start" Value="@TfConstants.GetIcon("RectangleLandscape", variant: IconVariant.Filled)"
						Color="Color.Custom"
						CustomColor="@Value.GetColor().Value" />
		}

	</FluentTextField>
}
else
{
	<div class="tf-select-node">
		<FluentStack>
			<FluentButton Id="@_elementId" Style="width:100%" Class="tf-select-btn"
						  Appearance="@Appearance.Outline"
						  OnClick="@(_=> _onOpenChanged(true))">

				@if (Value is null)
				{
					<span style="color:var(--tf-font-color-mute)">@LOC("not selected")</span>
				}
				else
				{
					<span>@(Value.GetColor().Name)</span>
					@if (Value == TfColor.White)
					{
						<FluentIcon Slot="start" Value="@TfConstants.GetIcon("RectangleLandscape")"
									Color="Color.Neutral" />
					}
					else
					{
						<FluentIcon Slot="start" Value="@TfConstants.GetIcon("RectangleLandscape", variant: IconVariant.Filled)"
									Color="Color.Custom"
									CustomColor="@Value.Value.GetColor().Value" />
					}
				}
				<FluentIcon Slot="end" Value="@TfConstants.GetIcon("ChevronDown")" CustomColor="var(--neutral-fill-strong-focus)" Color="@Color.Custom" />
			</FluentButton>
			@if (!Required && Value is not null)
			{
				<FluentButton Appearance=@Appearance.Outline IconStart="@TfConstants.GetIcon("Dismiss").WithColor(Color.Error)" OnClick="@(() => _optionChanged(null))" />
			}
		</FluentStack>
		@if (_open)
		{
			<FluentOverlay Visible="@true" OnClose="@(_ => _onOpenChanged(false))" Transparent="true" FullScreen="true" />
			<FluentAnchoredRegion Anchor="@_elementId" Style="max-height:200px;overflow:scroll;position:relative;height:200px"
								  AutoFocus="true" FixedPlacement="true" Class="tf-select-menu"
								  HorizontalDefaultPosition="HorizontalPosition.Center"
								  VerticalDefaultPosition="VerticalPosition.Bottom"
								  HorizontalPositioningMode="AxisPositioningMode.Dynamic"
								  VerticalPositioningMode="AxisPositioningMode.Dynamic"
								  HorizontalScaling="AxisScalingMode.Anchor">
				<div class="tf-select-menu__body">
					<FluentNavMenu>
						<Virtualize TItem="TfColor" Items="@_colors" Context="option" ItemSize="32">
							<FluentMenuItem @key=@((int)option) OnClick="@(() => _optionChanged(option))" Class="@(option == Value ? "tf-menu__item--active" : "")">
								@if (option == TfColor.White)
								{
									<FluentIcon Slot="start" Value="@TfConstants.GetIcon("RectangleLandscape")"
												Color="Color.Neutral" />
								}
								else
								{
									<FluentIcon Slot="start" Value="@TfConstants.GetIcon("RectangleLandscape", variant: IconVariant.Filled)"
												Color="Color.Custom"
												CustomColor="@option.GetColor().Value" />
								}
								<FluentLabel>@option.GetColor().Name</FluentLabel>
							</FluentMenuItem>
						</Virtualize>
					</FluentNavMenu>
				</div>
			</FluentAnchoredRegion>
		}
	</div>
}


