@namespace WebVella.Tefter.UI.Components
@inherits TfBaseComponent
<TucErrorBoundry>
	<div style="padding:var(--tf-layout-content-padding)">
		@if (_provider is null)
		{
			<FluentMessageBar AllowDismiss=false Intent="@MessageIntent.Error">@LOC("Item not found")</FluentMessageBar>
		}
		else
		{
			var columnCount = 0;
			<TucPageHeader Icon="TfConstants.AdminDataProviderIcon" Area="@LOC(TfConstants.AdminDataProvidersMenuTitle)"
						   Title="@_provider.Name" SubTitle="@LOC("Data")" IconColor="TfConstants.AdminColor" />
			<TucCard Title="@LOC("Provider records")">
				<ToolbarTemplate>
					<FluentStack VerticalAlignment="@VerticalAlignment.Center">
						<div style="margin-right:10px;color:var(--neutral-foreground-hint)">@LOC("{0} total rows", _totalRows)</div>
						<FluentButton OnClick="_deleteAllData" Appearance="@Appearance.Outline">
							<FluentIcon Value="@TfConstants.DeleteIcon" Slot="start" Color="@Color.Error" />
							@LOC("delete all data")
						</FluentButton>
					</FluentStack>
				</ToolbarTemplate>
				<ChildContent>
					<FluentStack>
						<FluentSearch Value="@_navData.State.Search" ValueChanged="_onSearch" AutoComplete="off" Placeholder="@LOC("search...")" />
						<FluentButton Id="view-filter-selector" Title="toggle system columns" OnClick="_toggleSystemColumns"
									  Appearance="Appearance.Outline">
							<FluentIcon Slot="start" Value="@(_showSystemColumns? TfConstants.GetIcon("Checkmark").WithColor(Color.Success) : TfConstants.GetIcon("Dismiss").WithColor(Color.Error))" />
							<span>system</span>
							<span slot="end">
								<FluentBadge Appearance="Appearance.Neutral">@_provider.SystemColumns.Count</FluentBadge>
							</span>
						</FluentButton>
						<FluentButton Id="view-filter-selector" Title="toggle join key columns" OnClick="_toggleJoinKeyColumns"
									  Appearance="Appearance.Outline">
							<FluentIcon Slot="start" Value="@(_showJoinKeyColumns? TfConstants.GetIcon("Checkmark").WithColor(Color.Success) : TfConstants.GetIcon("Dismiss").WithColor(Color.Error))" />
							<span>join key</span>
							<span slot="end">
								<FluentBadge Appearance="Appearance.Neutral">@_provider.SharedColumns.Count</FluentBadge>
							</span>
						</FluentButton>
						<FluentButton Id="view-filter-selector" Title="toggle custom columns" OnClick="_toggleCustomColumns"
									  Appearance="@Appearance.Outline">
							<FluentIcon Slot="start" Value="@(_showCustomColumns? TfConstants.GetIcon("Checkmark").WithColor(Color.Success) : TfConstants.GetIcon("Dismiss").WithColor(Color.Error))" />
							<span>custom</span>
							<span slot="end">
								<FluentBadge Appearance="Appearance.Neutral">@_provider.Columns.Count</FluentBadge>
							</span>
						</FluentButton>
					</FluentStack>
					@if (_data is not null && (_data.Rows.Count > 0 || _navData.State.Page != 1))
					{
						<div class="tf-grid-wrapper">
							<table class="tf-grid">
								<thead class="tf-grid-thead">
									<tr class="tf-grid-thead-bkg"></tr>
									<tr class="tf-grid-tr">
										@foreach (var column in _data.Columns)
										{
											if (!_columnIsVisible(column)) { continue; }
											<th class="tf-grid-th">@column.Name</th>
											columnCount++;
										}
									</tr>
								</thead>
								<tbody class="tf-grid-tbody">
									@if (_isDataLoading)
									{
										<tr class="tf-grid-tr">
											<td class="tf-grid-td" colspan="@columnCount"><div>Loading...</div></td>
										</tr>
									}
									else
									{
										foreach (TfDataRow row in _data.Rows)
										{
											<tr @key=@row["tf_id"] class="tf-grid-tr">
												@foreach (var column in _data.Columns)
												{
													if (!_columnIsVisible(column)) { continue; }
													<td class="tf-grid-td">
														@if (column.IsJoinColumn)
														{
															<div>@(String.Join(", ", (List<string>)row[column.Name]))</div>
														}
														else
														{
															<div>@row[column.Name]</div>
														}
													</td>
												}
											</tr>
										}
										@if (_data.Rows.Count == 0)
										{
											<tr class="tf-grid-tr">
												<td class="tf-grid-td" colspan="@columnCount">No records found</td>
											</tr>
										}
									}
								</tbody>
							</table>

						</div>
					}
					else if (_data is not null && _data.Columns.Count == 0)
					{
						<FluentMessageBar AllowDismiss="false">@LOC("No columns are created for this data provider yet")</FluentMessageBar>
					}
					else
					{
						<FluentMessageBar AllowDismiss="false">@LOC("No records")</FluentMessageBar>
					}
					<div class="tf-grid__pager">
						<TucPager Page="@(_data?.QueryInfo.Page ?? 1)" GoLast="@_goLastPage" GoNext="@_goNextPage"
								 GoFirst="@_goFirstPage" GoPrevious="@_goPreviousPage" GoOnPage="@_goOnPage"
								  PageSize="@(_data?.QueryInfo.PageSize ?? TfConstants.PageSize)" ChangePageSize="_pageSizeChange" />
					</div>
				</ChildContent>
			</TucCard>
		}
	</div>
</TucErrorBoundry>