@namespace WebVella.Tefter.UI.Components
@inherits TfBaseComponent

@* Header *@
<FluentDialogHeader ShowDismiss="true" Class="modal-with-tabs">
	<div class="modal-with-tabs__title">
		<FluentLabel Typo="Typography.PaneHeader">@LOC("Import schema")</FluentLabel>
	</div>
	<div class="modal-with-tabs__menu">
		@if (!_isBusy && string.IsNullOrWhiteSpace(_error))
		{
			<FluentNavMenu Class="tf-tabnav">
				<FluentNavLink OnClick="@(_ => _activeTab = "new")" Class="@(_activeTab == "new" ? "active" : "")">@LOC("New Columns")</FluentNavLink>
				<FluentNavLink OnClick="@(_ => _activeTab = "existing")" Class="@(_activeTab == "existing" ? "active" : "")">@LOC("Already Present")</FluentNavLink>
			</FluentNavMenu>
		}
	</div>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
	@if (String.IsNullOrWhiteSpace(_error) && _newColumns.Count > 0)
	{
		<FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="@TfConstants.GetIcon("ArrowDownload")"
					  Loading="_isSubmitting" Disabled="@(_isSubmitting || _isBusy || _activeTab == "existing")">@LOC("Import")</FluentButton>
	}
	<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Cancel")</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
	<div>
		@if (_isBusy)
		{
			<TucLoadingPane />
		}
		else if (!string.IsNullOrWhiteSpace(_error))
		{
			<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@_error</FluentMessageBar>

		}
		else if (_activeTab == "new")
		{
			@if (_newColumns.Count > 0)
			{
				var _rowIndex = -1;
				<table class="tf-grid">
					<colgroup>
						<col style="width:60px;max-width:60px;" />
						<col />
						<col style="width:180px;max-width:180px;" />
						<col />
						<col style="width:180px;max-width:180px;" />
						<col />
						<col style="width:80px;max-width:80px;" />
						<col style="width:80px;max-width:80px;" />
						<col style="width:80px;max-width:80px;" />
						<col style="width:80px;max-width:80px;" />
						<col style="width:110px;max-width:110px;" />
						<col style="width:120px;max-width:120px;" />
						<col style="width:80px;max-width:80px;" />
					</colgroup>
					<thead class="tf-grid-thead">
						<tr class="tf-grid-thead-bkg"></tr>
						<tr class="tf-grid-tr">
							<th class="tf-grid-th"></th>
							<th class="tf-grid-th">@LOC("column name")</th>
							<th class="tf-grid-th">@LOC("data type")</th>
							<th class="tf-grid-th">@LOC("SOURCE column")</th>
							<th class="tf-grid-th">@LOC("SOURCE type")</th>
							<th class="tf-grid-th">@LOC("default")</th>
							<th class="tf-grid-th">@LOC("nullable")</th>
							<th class="tf-grid-th">@LOC("unique")</th>
							<th class="tf-grid-th">@LOC("autogen")</th>
							<th class="tf-grid-th">@LOC("searched")</th>
							<th class="tf-grid-th">@LOC("global search")</th>
							<th class="tf-grid-th">@LOC("search type")</th>
							<th class="tf-grid-th">@LOC("sortable")</th>
						</tr>
					</thead>
					<tbody class="tf-grid-tbody">
						@foreach (var context in _newColumns)
						{
							_rowIndex++;
							<tr @key=context.Id class="tf-grid-tr">
								<td class="tf-grid-td">
									<div><FluentButton Appearance=@Appearance.Outline IconStart="@TfConstants.GetIcon("Dismiss")!.WithColor(Color.Error)" OnClick="@(_ => _removeRow(context))" /></div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentTextField TextFieldType="@TextFieldType.Text" Value=@_processColumnName(context.DbName)
														 ValueChanged="@(x => _dbNameChanged(x,context))" AutoComplete="off"
														 Style="width:100%"
														 Class="@($"{_getValidationCssClass(context.SourceName,nameof(context.DbName))} with-prefix")">
											<span slot="start">@Content!.ColumnPrefix</span>
										</FluentTextField>
										<TucValidationMessage Field="@nameof(context.DbName)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<TucSelect @bind-SelectedOption="@context.DbType"
												   TOption="TfDatabaseColumnType"
												   Style="width:100%"
												   Class="@_getValidationCssClass(context.SourceName,nameof(context.DbType))"
												   Items="@_schemaInfo.SourceTypeSupportedDbTypes[context.SourceType]"
												   OptionValue="@(x=> x.ToString())"
												   OptionText="@(x => x.ToString())" />
										<TucValidationMessage Field="@nameof(context.DbType)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>@context.SourceName</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<TucSelect SelectedOption="@context.SourceType"
												   TOption="string"
												   SelectedOptionChanged="@(x => _sourceTypeChanged(x,context))" Style="width:100%"
												   Class="@_getValidationCssClass(context.SourceName,nameof(context.SourceType))"
												   Items="@_schemaInfo.SourceTypeSupportedDbTypes.Keys" />
										<TucValidationMessage Field="@nameof(context.SourceType)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@context.DefaultValue AutoComplete="off"
														 Class="@_getValidationCssClass(context.SourceName,nameof(context.DefaultValue))" Style="width:100%" />
										<TucValidationMessage Field="@nameof(context.DefaultValue)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsNullable @bind-Value:after=@(() => _nullableChanged(context)) Class="@_getValidationCssClass(context.SourceName, nameof(context.IsNullable))" />
										<TucValidationMessage Field="@nameof(context.IsNullable)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsUnique Class="@_getValidationCssClass(context.SourceName, nameof(context.IsUnique))" />
										<TucValidationMessage Field="@nameof(context.IsUnique)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										@if (_dbTypeInfoDict[context.DbType].SupportAutoDefaultValue)
										{
											<FluentSwitch @bind-Value=@context.AutoDefaultValue Class="@_getValidationCssClass(context.SourceName, nameof(context.AutoDefaultValue))" />
											<TucValidationMessage Field="@nameof(context.AutoDefaultValue)" Index=_rowIndex Errors="ValidationErrors" />
										}
										else
										{
											<span>n/a</span>
										}
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsSearchable Class="@_getValidationCssClass(context.SourceName, nameof(context.IsSearchable))" />
										<TucValidationMessage Field="@nameof(context.IsSearchable)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IncludeInTableSearch Class="@_getValidationCssClass(context.SourceName, nameof(context.IncludeInTableSearch))" />
										<TucValidationMessage Field="@nameof(context.IncludeInTableSearch)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<TucSelect TOption="TfDataProviderColumnSearchType"
													  @bind-SelectedOption="@context.PreferredSearchType"
													  Items="@(Enum.GetValues<TfDataProviderColumnSearchType>())"
													  Style="width:100%" Class="@_getValidationCssClass(context.SourceName,nameof(context.PreferredSearchType))"
													  OptionText="((p)=> p.ToString())"
													  OptionValue="((p)=> ((int)p).ToString())" />
										<TucValidationMessage Field="@nameof(context.PreferredSearchType)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsSortable Class="@_getValidationCssClass(context.SourceName, nameof(context.IsSortable))" />
										<TucValidationMessage Field="@nameof(context.IsSortable)" Index=_rowIndex Errors="ValidationErrors" />
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
			else
			{
				<FluentMessageBar Intent="@MessageIntent.Info" AllowDismiss="false">@LOC("No new columns are found in the source")</FluentMessageBar>
			}
		}
		else if (_activeTab == "existing")
		{
			<table class="tf-grid">
				<colgroup>
					<col />
					<col style="width:180px;max-width:180px;" />
					<col />
					<col style="width:180px;max-width:180px;" />
					<col />
					<col style="width:80px;max-width:80px;" />
					<col style="width:80px;max-width:80px;" />
					<col style="width:80px;max-width:80px;" />
					<col style="width:80px;max-width:80px;" />
					<col style="width:110px;max-width:110px;" />
					<col style="width:120px;max-width:120px;" />
					<col style="width:80px;max-width:80px;" />
				</colgroup>
				<thead class="tf-grid-thead">
					<tr class="tf-grid-thead-bkg"></tr>
					<tr class="tf-grid-tr">
						<th class="tf-grid-th">@LOC("column name")</th>
						<th class="tf-grid-th">@LOC("data type")</th>
						<th class="tf-grid-th">@LOC("SOURCE column")</th>
						<th class="tf-grid-th">@LOC("SOURCE type")</th>
						<th class="tf-grid-th">@LOC("Default")</th>
						<th class="tf-grid-th">@LOC("Nullable")</th>
						<th class="tf-grid-th">@LOC("Unique")</th>
						<th class="tf-grid-th">@LOC("Autogenerated")</th>
						<th class="tf-grid-th">@LOC("Searchable")</th>
						<th class="tf-grid-th">@LOC("Global search")</th>
						<th class="tf-grid-th">@LOC("Search type")</th>
						<th class="tf-grid-th">@LOC("Sortable")</th>
					</tr>
				</thead>
				<tbody class="tf-grid-tbody">
					@foreach (var context in _existingColumns)
					{
						<tr @key=context.Id class="tf-grid-tr">
							<td class="tf-grid-td">
								<div>@context.DbName</div>
							</td>
							<td class="tf-grid-td">
								<div>@(_dbTypeInfoDict[context.DbType].Name)</div>
							</td>
							<td class="tf-grid-td">
								<div>@context.SourceName</div>
							</td>
							<td class="tf-grid-td">
								<div>@context.SourceType</div>
							</td>
							<td class="tf-grid-td">
								<div>@context.DefaultValue</div>
							</td>
							<td class="tf-grid-td">
								<div>
									<FluentSwitch @bind-Value=@context.IsNullable Disabled="true" />
								</div>
							</td>
							<td class="tf-grid-td">
								<div>
									<FluentSwitch @bind-Value=@context.IsUnique Disabled="true" />
								</div>
							</td>
							<td class="tf-grid-td">
								<div>
									<FluentSwitch @bind-Value=@context.AutoDefaultValue Disabled="true" />
								</div>
							</td>
							<td class="tf-grid-td">
								<div>
									<FluentSwitch @bind-Value=@context.IsSearchable Disabled="true" />
								</div>
							</td>
							<td class="tf-grid-td">
								<div>
									<FluentSwitch @bind-Value=@context.IncludeInTableSearch Disabled="true" />
								</div>
							</td>
							<td class="tf-grid-td">
								<div>@context.PreferredSearchType.ToString()</div>
							</td>
							<td class="tf-grid-td">
								<div>
									<FluentSwitch @bind-Value=@context.IsSortable Disabled="true" />
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>

			@if (_existingColumns.Count == 0)
			{
				<FluentMessageBar Intent="@MessageIntent.Info" AllowDismiss="false">@LOC("No existing columns are yet created")</FluentMessageBar>
			}
		}
	</div>
</FluentDialogBody>
