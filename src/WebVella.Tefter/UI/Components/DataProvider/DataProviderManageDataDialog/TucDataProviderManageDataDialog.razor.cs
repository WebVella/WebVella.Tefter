namespace WebVella.Tefter.UI.Components;

public partial class TucDataProviderManageDataDialog : TfBaseComponent, IDialogContentComponent<TfManageDataProviderRowContext?>
{
	[Parameter] public TfManageDataProviderRowContext? Content { get; set; }

	[CascadingParameter] public FluentDialog Dialog { get; set; } = null!;

	private string _error = string.Empty;
	private bool _isSubmitting = false;

	private Dictionary<string, object?> _form = new();
	private Dictionary<string, string?> _errors = new();
	private Dictionary<string, string?> _placeholders = new();
	private ReadOnlyDictionary<Guid, TfSpaceViewColumnComponentAddonMeta> _componentMetaDict = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		_init();
	}
	private void _init()
	{
		if (Content is null) throw new Exception("Content is required");
		if (Content.Provider is null) throw new Exception("Provider is required");
		if (Content.Data is null) throw new Exception("Data is required");
		_componentMetaDict = TfMetaService.GetSpaceViewColumnComponentMetaDictionary();

		_errors = new();
		_form = new();
		foreach (var column in Content.Provider.Columns)
		{
			var ruleset = column.GetRuleSet();
			_form[column.DbName!] = null;
			_placeholders[column.DbName!] = null;
			switch (ruleset)
			{
				case TfDataProviderColumnRuleSet.Nullable:
					break;
				case TfDataProviderColumnRuleSet.NullableWithDefault:
					_placeholders[column.DbName!] = $"defaults to '{column.DefaultValue}'";
					break;
				case TfDataProviderColumnRuleSet.NullableWithAutoDefault:
				case TfDataProviderColumnRuleSet.Unique:
					_placeholders[column.DbName!] = "defaults to autogenerated value";
					break;
				default:
					break;
			}
		}

		if (Content.RowId is not null)
		{
			foreach (var dbName in _form.Keys)
			{
				_form[dbName] = Content.Data[Content.RowId.Value, dbName];
			}
		}
	}


	private async Task _save()
	{
		if (_isSubmitting) return;
		try
		{

			_errors = new();
			_isSubmitting = true;
			await InvokeAsync(StateHasChanged);
			await Task.Delay(1);
			var newDt = Content!.Data.NewTable();
			TfDataRow newRow = newDt.NewRow();
			foreach (var column in Content.Provider.Columns)
			{
				var dbName = column.DbName!;
				newRow[dbName] = _form[dbName];
				var ruleset = column.GetRuleSet();
				if (_form.ContainsKey(dbName) && _form[dbName] is not null)
				{
					newRow[dbName] = _form[dbName]!;
				}
			}
			throw new NotImplementedException();
			//var dt = TfDataProviderUIService.AddNewRow(newDt);
			await Dialog.CloseAsync();
		}
		catch (Exception ex)
		{
			ProcessException(ex);
			_error = ex.Message;
		}
		finally
		{
			_isSubmitting = false;
			await InvokeAsync(StateHasChanged);
		}
	}
	private async Task _cancel()
	{
		await Dialog.CancelAsync();
	}


	private void _valueChanged(object? value, TfDataProviderColumn column)
	{
		_form[column.DbName!] = value;
		StateHasChanged();
	}

}

