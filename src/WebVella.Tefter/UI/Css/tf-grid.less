@import '_colors.less';

@keyframes gridLoadingBar {
  0% {
    left: 0%;
    right: 100%;
    width: 0%;
  }

  10% {
    left: 0%;
    right: 75%;
    width: 25%;
  }

  90% {
    right: 0%;
    left: 75%;
    width: 25%;
  }

  100% {
    left: 100%;
    right: 0%;
    width: 0%;
  }
}

.tf-grid {
  table-layout: fixed;
  min-width: 100%;
  border-width: 0;
  border-color: var(--neutral-stroke-rest);
  border-collapse: separate !important;
  border-spacing: 0 !important;
  margin-bottom: 0;
  border-bottom: 1px solid var(--neutral-stroke-rest);

  .fluent-dialog-body &,
  .tf-card & {
    border-left: 1px solid var(--neutral-stroke-rest);
    border-right: 1px solid var(--neutral-stroke-rest);
  }

  thead {
    position: relative;
    z-index: 1;

    & > tr:not(.tf-grid-thead-bkg):not(.tf-grid-thead-loading) {
      position: relative;
      z-index: 2;

      &:first-child {
        & > th {
          border-top: none;
        }
      }
    }

    & tr > th,
    & tr > td {
      border: 1px solid var(--neutral-stroke-rest);
      font-weight: 600;
      min-width: 60px;
      position: relative;
      --tf-cell-padding: calc(((var(--design-unit) * 3) + var(--focus-stroke-width) - var(--stroke-width)) * 1px);


      .resize-handle {
        display: none;
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 5px;
        background: var(--neutral-stroke-rest);
        content: "";
        cursor: col-resize;
      }

      &:hover, &.tf-resizing {
        .resize-handle {
          display: block;
        }
      }

      &.tf-resizing .resize-handle, .resize-handle:hover {
        background: var(--accent-fill-rest);
      }

      .tf-column-action {
        display: none;
        position: absolute;
        right: 0;
        top: 50%;
        margin-top: -10px;
        width: 20px;
        height: 20px;
        overflow: hidden;
        border-radius: 5px;
        background: var(--neutral-fill-secondary-rest);
        content: "";
        cursor: pointer;
        --tf-caret-color: var(--neutral-foreground-focus);
        justify-content: center;
        align-items: center;

        &:hover {
          background: var(--accent-fill-rest) !important;
          --tf-caret-color: var(--tf-white);
        }
      }

      &:hover .tf-column-action {
        display: flex;
        background: var(--neutral-fill-layer-alt-rest);
      }

      .tf-column-sort {
        right: var(--tf-cell-padding);

        svg {
          display: block;
        }

        &--descending, &--ascending {
          display: flex;
        }

        &__caret, &__caret-down, &__caret-up {
          display: none;
        }

        &--none .tf-column-sort__caret {
          display: block;
        }

        &--ascending .tf-column-sort__caret-up {
          display: block;
        }

        &--descending .tf-column-sort__caret-down {
          display: block;
        }
      }

      .tf-column-manage {
        right: calc(var(--tf-cell-padding) + 25px);
      }
    }

    & tr > th,
    & tr > td {
      border-left-width: 0;
    }
  }

  &-thead {
    &-bkg {
      position: absolute;
      content: "";
      top: 0;
      bottom: 0;
      left: 1px;
      right: 0;
      z-index: 1;
      pointer-events: none;
      background: var(--fill-color);

      .fluent-dialog-body &,
      .tf-card & {
        background: var(--neutral-fill-rest);
      }
    }


    &-loading {
      position: absolute;
      content: "";
      height: 3px;
      bottom: -1px;
      left: 0;
      right: 0;
      z-index: 10;
      pointer-events: none;
      background: linear-gradient(90deg, transparent 33%, var(--accent-fill-rest) 66%, transparent 100%);
      width: 0;
      animation: gridLoadingBar 2s linear infinite;
    }
  }

  tbody {
    position: relative;
    z-index: 2;

    & tr {
      & > th,
      & > td {
        border-bottom-width: 0;
        border-left-width: 0;
        border-right-width: 1px;
        border-top-width: 1px;
        position: relative;
        vertical-align: top;

        &::before {
          content: "";
          position: absolute;
          top: 0;
          right: 0;
          left: 0;
          bottom: 0;
          z-index: 0;
          border-radius: 0;
        }

        & > * {
          position: relative;
        }

        & > .tf-grid-td-color {
          content: "";
          position: absolute;
          top: 0;
          right: 0;
          left: 0;
          bottom: 0;
          z-index: 0;
          border-radius: 0;
        }

        & > .tf-grid-td-selection {
          display: none;
          content: "";
          position: absolute;
          top: 0;
          right: 0;
          left: 0;
          bottom: 0;
          z-index: 0;
          border-radius: 0;
        }

        & > .tf-grid-td-hover {
          display: none;
          content: "";
          position: absolute;
          top: 0;
          right: 0;
          left: 0;
          bottom: 0;
          z-index: 0;
          border-radius: 0;
          background: var(--neutral-fill-hover);
        }

        & > div {
          border-radius: calc(var(--control-corner-radius) * 1px);
          /*white-space: nowrap;*/
          text-overflow: ellipsis;
          padding: calc((var(--design-unit) + var(--focus-stroke-width) - var(--stroke-width)) * 1px) calc(((var(--design-unit) * 3) + var(--focus-stroke-width) - var(--stroke-width)) * 1px);
          min-height: 32px;
        }

        &.multiline-text {
          white-space: break-spaces;
        }

        & a {
          text-decoration: none;

          &:hover {
            text-decoration: underline;
          }
        }

        & .td-description {
          font-size: var(--type-ramp-minus-1-font-size);
          color: var(--neutral-foreground-hint);
          white-space: initial;
        }
      }

      &.tf-grid-tr--selected .tf-grid-td-selection {
        display: block;
      }

      &.tf-grid-tr--selected .tf-grid-td-hover {
        background: color-mix(in srgb, var(--neutral-fill-rest), var(--accent-fill-rest) 15%);
      }

      &:hover .tf-grid-td-hover {
        display: block;
      }

      &:last-child > th,
      &:last-child > td {
        border-bottom: 1px solid var(--neutral-stroke-rest);
      }

      &.tf-grid-tr--edited .tf-grid-td--check::after {
        content: "";
        position: absolute;
        border-radius: 0 5px 5px 0;
        top: 2px;
        bottom: 2px;
        width: 5px;
        left: -1px;
        background: var(--tf-amber-300);
      }

      /*            &.tf-grid-tr--selected .tf-grid-td--check::after {
                      background: var(--tf-amber-400);
                  }*/
    }
  }

  & > tbody {
    tr:first-child {
      & > td,
      & > th {
        border-top-width: 0;
      }
    }

    & > div + tr {
      & > td,
      & > th {
        border-top-width: 0;
      }
    }
  }

  td, th {
    border-width: 1px;
    border-style: solid;

    & > div {
      display: flex;
      justify-content: start;
      align-items: start;
      flex-flow: column;
    }
  }

  thead, tbody {
    & > tr {
      & > .tf-grid-th--check,
      & > .tf-grid-td--check {
        padding: 0 !important;
        text-align: center;
        width: 40px;
        min-width: 40px;

        .check-content {
          padding: 0;
          display: flex;

          &.multi {
            display: flex;
            flex-flow: column;
            justify-content: center;
            align-items: center;

            fluent-button {
              flex: 0 0 auto;
              background: transparent !important;
              border-radius: 3px !important;
              height: unset;
              margin: 2px 0;

              &::part(control) {
                width: 100%;
              }

              &:hover {
                background: var(--tf-white) !important;
              }

              svg {
                --neutral-stroke-input-active: var(--neutral-stroke-rest);
              }
            }
          }

          &.check {
            fluent-button {
              position: absolute;
              top: 0;
              left: 0;
              height: 100%;
              width: 100%;
              background: transparent !important;

              &::part(control) {
                background: transparent !important;
                border: none;
              }

              &:hover {
                background: transparent !important;
              }

              svg {
                --neutral-stroke-input-active: var(--neutral-stroke-rest);
              }
            }
          }
        }
      }

      & > th:first-child, & > td:first-child {
        border-left-width: 0;
      }

      & > th:last-child, & > td:last-child {
        border-right-width: 0;
      }

      & > td > div:not([class]):empty {
        height: 30px;
      }

      .tr-actions {
        display: none;
      }

      &:hover .tr-actions {
        display: flex;
      }
    }

    th.tf--sticky, td.tf--sticky {
      position: sticky;
      z-index: 2;
    }


    .tf--sticky-first::after {
      border-right-width: 1px;
      border-right-style: solid;
      content: "";
      display: block;
      width: 10px;
      top: 0;
      bottom: 0;
      left: -11px;
      box-shadow: inset -2px 0 5px var(--neutral-layer-2);
      position: absolute;
    }

    .tf--sticky-last::after {
      content: "";
      display: block;
      width: 10px;
      right: -10px;
      top: 0;
      bottom: 0;
      box-shadow: inset 5px 0 5px rgba(0, 0, 0, 0.1);
      position: absolute;
    }
  }

  thead, tfoot {
    & > tr {
      & > th, & > td {
        white-space: nowrap;
        text-overflow: ellipsis;
        padding: calc((var(--design-unit) + var(--focus-stroke-width) - var(--stroke-width)) * 1px) calc(((var(--design-unit) * 3) + var(--focus-stroke-width) - var(--stroke-width)) * 1px);
      }
    }
  }

  .tf-grid-td-spacer {
    display: inline-block;
    width: 1rem;
  }

  &--sticky {
    thead {
      position: sticky;
      top: 0;
      z-index: 3;
    }
    tbody{
      position: unset;
    }
  }  
}

.tf-grid__pager {
  margin-top: 1rem;
}

.tf-grid-tr.tf-grid-tr--selected .tf-grid-td-selection {
  background: color-mix(in srgb, var(--neutral-fill-rest), var(--accent-fill-rest) 10%);
}

.tf-grid-tr:hover .tf-grid-td-hover {
  background: var(--neutral-fill-hover);
}

@td-colors: red, orange,
amber, yellow, lime, green, emerald, teal,
cyan, sky, blue, indigo, violet, purple,
fuchsia, pink, rose;

.generate-color-variables(@list, @i: 1) when (@i <= length(@list)) {
  // Get the current color name
  @color: extract(@list, @i);

  // Generate the CSS variable name and value
  // Note: color-mix is a CSS function, not LESS. We output it directly.
  --tf-td-color-@{color}: var(--tf-@{color}-500);
  --tf-td-fill-@{color}: color-mix(in srgb, var(--neutral-fill-rest), var(--tf-@{color}-500) 5%);

  // Recursively call the mixin for the next item
  .generate-color-variables(@list, @i + 1);
}


.tf-grid .tf-grid-td {
  .generate-color-variables(@td-colors);
}
