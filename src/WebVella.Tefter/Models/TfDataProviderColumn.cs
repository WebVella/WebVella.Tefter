using System.ComponentModel.DataAnnotations;

namespace WebVella.Tefter.Models;


[DboCacheModel]
[TfDboModel("tf_data_provider_column")]
public class TfDataProviderColumn
{
	[TfDboModelProperty("id")]
	public Guid Id { get; set; }

	[TfDboModelProperty("data_provider_id")]
	public Guid DataProviderId { get; set; }

	[TfDboModelProperty("source_name")]
	public string? SourceName { get; set; }

	[TfDboModelProperty("source_type")]
	public string? SourceType { get; set; } = null;

	[TfDboTypeConverter(typeof(TfDateTimePropertyConverter))]
	[TfDboModelProperty("created_on")]
	public DateTime CreatedOn { get; set; }

	[Required]
	[TfDboModelProperty("db_name")]
	public string? DbName { get; set; }

	[TfDboTypeConverter(typeof(TfEnumPropertyConverter<TfDatabaseColumnType>))]
	[TfDboModelProperty("db_type")]
	public TfDatabaseColumnType DbType { get; set; } = TfDatabaseColumnType.Text;

	[TfDboModelProperty("default_value")]
	public string? DefaultValue { get; set; }

	[TfDboModelProperty("auto_default_value")]
	public bool AutoDefaultValue { get; set; } = true;

	[TfDboModelProperty("is_nullable")]
	public bool IsNullable { get; set; } = true;

	[TfDboModelProperty("is_unique")]
	public bool IsUnique { get; set; }

	[TfDboModelProperty("is_sortable")]
	public bool IsSortable { get; set; } = true;

	[TfDboModelProperty("is_searchable")]
	public bool IsSearchable { get; set; } = true;

	[Obsolete]
	[TfDboTypeConverter(typeof(TfEnumPropertyConverter<TfDataProviderColumnSearchType>))]
	[TfDboModelProperty("preferred_search_type")]
	public TfDataProviderColumnSearchType PreferredSearchType { get; set; } = TfDataProviderColumnSearchType.Contains;

	[TfDboModelProperty("include_in_table_search")]
	public bool IncludeInTableSearch { get; set; }

	public void FixPrefix(string prefix)
	{
		if (!String.IsNullOrWhiteSpace(DbName) && !DbName.StartsWith(prefix))
			DbName = prefix + DbName;
	}
	public void ApplyRuleSet(TfDataProviderColumnRuleSet ruleSet, string? defaultValue)
	{
		switch (ruleSet)
		{
			//1. IsNullable = true, IsUnique = false, AutoDefaultValue = false, DefaultValue = null
			//Nullable = 0,
			default:
				IsNullable = true;
				IsUnique = false;
				AutoDefaultValue = false;
				DefaultValue = null;
				break;
			//2. IsNullable = false, IsUnique = false, AutoDefaultValue = false, DefaultValue = REQUIRED
			case TfDataProviderColumnRuleSet.NullableWithDefault:
				IsNullable = false;
				IsUnique = false;
				AutoDefaultValue = false;
				DefaultValue = defaultValue ?? throw new Exception("Default Value is required");
				break;
			//3. IsNullable = false, IsUnique = false, AutoDefaultValue = true, DefaultValue = null
			case TfDataProviderColumnRuleSet.NullableWithAutoDefault:
				IsNullable = false;
				IsUnique = false;
				AutoDefaultValue = true;
				DefaultValue = null;
				break;
			//4. IsNullable = false, IsUnique = true, AutoDefaultValue = true, DefaultValue = null
			case TfDataProviderColumnRuleSet.Unique:
				IsNullable = false;
				IsUnique = true;
				AutoDefaultValue = true;
				DefaultValue = null;
				break;
		}
	}
	public TfDataProviderColumnRuleSet GetRuleSet()
	{
		//2. IsNullable = false, IsUnique = false, AutoDefaultValue = false, DefaultValue = REQUIRED
		if (!IsNullable && !IsUnique && !AutoDefaultValue && DefaultValue is not null)
			return TfDataProviderColumnRuleSet.NullableWithDefault;

		//3. IsNullable = false, IsUnique = false, AutoDefaultValue = true, DefaultValue = null
		if (!IsNullable && !IsUnique && AutoDefaultValue && DefaultValue is null)
			return TfDataProviderColumnRuleSet.NullableWithAutoDefault;

		//4. IsNullable = false, IsUnique = true, AutoDefaultValue = true, DefaultValue = null
		if (!IsNullable && IsUnique && AutoDefaultValue && DefaultValue is null)
			return TfDataProviderColumnRuleSet.Unique;

		//1.[Nullable] IsNullable = true, IsUnique = false, AutoDefaultValue = false, DefaultValue = null
		return TfDataProviderColumnRuleSet.Nullable;
	}

	public TfUpsertDataProviderColumn ToUpsert()
	{

		var model = new TfUpsertDataProviderColumn
		{
			Id = Id,
			DataProviderId = DataProviderId,
			SourceName = SourceName,
			SourceType = SourceType,
			CreatedOn = CreatedOn,
			DbName = DbName,
			DbType = DbType,
			IncludeInTableSearch = IncludeInTableSearch,
			DefaultValue = DefaultValue,
			RuleSet = this.GetRuleSet(),
		};
		return model;
	}
}


public enum TfDataProviderColumnRuleSet
{
	//1. IsNullable = true, IsUnique = false, AutoDefaultValue = false, DefaultValue = null
	[Description("leave NULL when not provided")]
	Nullable = 0,
	//2. IsNullable = false, IsUnique = false, AutoDefaultValue = false, DefaultValue = REQUIRED
	[Description("required with static default when not provided")]
	NullableWithDefault = 1,
	//3. IsNullable = false, IsUnique = false, AutoDefaultValue = true, DefaultValue = null
	[Description("required with autogenerated value when not provided")]
	NullableWithAutoDefault = 2,
	//4. IsNullable = false, IsUnique = true, AutoDefaultValue = true, DefaultValue = null
	[Description("required and must have only unique values")]
	Unique = 3
}

public class TfUpsertDataProviderColumn
{
	public Guid Id { get; set; }
	public Guid DataProviderId { get; set; }
	public string? SourceName { get; set; }
	public string? SourceType { get; set; } = null;
	public DateTime CreatedOn { get; set; }
	public string? DbName { get; set; }
	public TfDatabaseColumnType DbType { get; set; } = TfDatabaseColumnType.Text;
	public string? DefaultValue { get; set; }
	public TfDataProviderColumnRuleSet RuleSet { get; set; } = TfDataProviderColumnRuleSet.Nullable;
	public bool IncludeInTableSearch { get; set; }
	public void FixPrefix(string prefix)
	{
		if (!String.IsNullOrWhiteSpace(DbName) && !DbName.StartsWith(prefix))
			DbName = prefix + DbName;
	}

	public TfDataProviderColumn ToModel()
	{
		var model = new TfDataProviderColumn
		{
			Id = Id,
			DataProviderId = DataProviderId,
			SourceName = SourceName,
			SourceType = SourceType,
			CreatedOn = CreatedOn,
			DbName = DbName,
			DbType = DbType,
			IncludeInTableSearch = IncludeInTableSearch,
			DefaultValue = null,//set below
			AutoDefaultValue = false,//set below
			IsNullable = false, //set below
			IsUnique = false,//set below
			IsSortable = true,//always
			IsSearchable = true,//always
			PreferredSearchType = TfDataProviderColumnSearchType.Equals,//outdated
		};
		//Applies the ruleset props
		model.ApplyRuleSet(RuleSet, DefaultValue);

		return model;
	}
}