@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inherits TfBaseComponent

@if (Item is TucFilterAnd || Item is TucFilterOr)
{
	<TfCard Small="true" Style="margin-bottom:7px">
		<TitleTemplate>
			<FluentStack VerticalAlignment="@VerticalAlignment.Center">
				<FluentStack HorizontalGap="0" HorizontalAlignment="@HorizontalAlignment.Left">
					<FluentLabel Typo="@Typography.Body" Color="@Color.Accent">@TucFilterBase.GetColumnName(Item)</FluentLabel>
					<FluentLabel Typo="@Typography.Body" Style="margin-left:0.5rem;color:var(--neutral-foreground-rest);opacity:0.5">@TucFilterBase.GetFieldType(Item)</FluentLabel>
				</FluentStack>
				<FluentStack HorizontalAlignment="@HorizontalAlignment.Right" VerticalAlignment="@VerticalAlignment.Center">
					@if (TfSpaceDataManage.SelectedProvider is null)
					{
						<FluentBadge Appearance="Appearance.Accent">@LOC("no data provider")</FluentBadge>
					}
					else if (TfSpaceDataManage.SelectedProvider.ColumnsTotal.Count == 0)
					{
						<FluentBadge Appearance="Appearance.Accent">@LOC("no columns")</FluentBadge>
					}
					else
					{
						<FluentSelect @bind-SelectedOption="@_selectedFilterColumn"
									  TOption="string" Required="false"
									  Items="@TfSpaceDataManage.AllColumnOptions" Style="width:140px"
									  Placeholder="@LOC("select...")"></FluentSelect>
						<FluentButton Class="" OnClick="@_addColumnFilterHandler" IconStart="@TfConstants.AddIcon.WithColor(Color.Accent)" Appearance="@Appearance.Outline">@LOC("Column")</FluentButton>
					}
					<FluentButton Class="" OnClick="@(() => TfSpaceDataManage.AddFilter(typeof(TucFilterAnd),null,Item.Id))" IconStart="@TfConstants.AddIcon.WithColor(Color.Accent)" Appearance="@Appearance.Outline">@LOC("AND")</FluentButton>
					<FluentButton Class="" OnClick="@(() => TfSpaceDataManage.AddFilter(typeof(TucFilterOr),null,Item.Id))" IconStart="@TfConstants.AddIcon.WithColor(Color.Accent)" Appearance="@Appearance.Outline">@LOC("OR")</FluentButton>
					<FluentButton Class="" OnClick="_deleteFilterHandler" IconStart="@TfConstants.DeleteIcon.WithColor(Color.Error)"
								  Appearance="@Appearance.Outline" Title="@LOC("delete filter")" />
				</FluentStack>
			</FluentStack>
		</TitleTemplate>
		<ChildContent>
			@if (TucFilterBase.GetChildFilters(Item).Count == 0)
			{
				<div>@LOC("No filters added yet")</div>
			}
			@foreach (var item in TucFilterBase.GetChildFilters(Item))
			{
				<TfFilterManage Item="item" />
			}
		</ChildContent>
	</TfCard>
}
else
{
	<TfCard Small="true" Style="margin-bottom:7px">
		<TitleTemplate>
			<FluentStack VerticalAlignment="@VerticalAlignment.Center">
				<FluentStack HorizontalAlignment="@HorizontalAlignment.Left" VerticalAlignment="@VerticalAlignment.Center">
					<FluentStack HorizontalAlignment="@HorizontalAlignment.Left" Wrap="false" Width="400px"
								 VerticalAlignment="@VerticalAlignment.Center">
						<FluentLabel Typo="@Typography.Body" Color="@Color.Accent">@TucFilterBase.GetColumnName(Item)</FluentLabel>
						<FluentLabel Typo="@Typography.Body" Style="color:var(--neutral-foreground-rest);opacity:0.5">@TucFilterBase.GetFieldType(Item)</FluentLabel>
					</FluentStack>
					<FluentStack HorizontalAlignment="@HorizontalAlignment.Left" Wrap="false" 
								 VerticalAlignment="@VerticalAlignment.Center">

						@if (Item is TucFilterBoolean)
						{
							var context = (TucFilterBoolean)Item;
							<FluentSelect @bind-SelectedOption="@context.ComparisonMethod"
										  TOption="TucFilterBooleanComparisonMethod" Required="true"
										  Items="@(Enum.GetValues<TucFilterBooleanComparisonMethod>())" Style="width:140px"
										  OptionText="@((p)=> p.ToString())"></FluentSelect>
							@if (context.RequiresValue)
							{
								<FluentSelect Value="@context.ValueString" SelectedOptionChanged="@context.ValueOptionChanged"
											  TOption="Option<string>" Required="false"
											  OptionText="@((p)=> p.Text)"
											  OptionValue="@((p)=> p.Value)"
											  Items="@context.ValueOptions" Style="width:300px"></FluentSelect>
							}
						}
						else if (Item is TucFilterDateOnly)
						{
							var context = (TucFilterDateOnly)Item;
							<FluentSelect @bind-SelectedOption="@context.ComparisonMethod"
										  TOption="TucFilterDateTimeComparisonMethod" Required="true"
										  Items="@(Enum.GetValues<TucFilterDateTimeComparisonMethod>())" Style="width:140px"
										  OptionText="@((p)=> p.ToString())"></FluentSelect>
							@if (context.RequiresValue)
							{
								<FluentTextField Value="@context.ValueString" ValueChanged="@context.ValueStringChanged"
												 Placeholder="@($"eg. {TfConstants.DateOnlyFormatInput}")" Style="width:300px"/>
							}
						}
						else if (Item is TucFilterDateTime)
						{
							var context = (TucFilterDateTime)Item;
							<FluentSelect @bind-SelectedOption="@context.ComparisonMethod"
										  TOption="TucFilterDateTimeComparisonMethod" Required="true"
										  Items="@(Enum.GetValues<TucFilterDateTimeComparisonMethod>())" Style="width:140px"
										  OptionText="@((p)=> p.ToString())"></FluentSelect>
							@if (context.RequiresValue)
							{
								<FluentTextField Value="@context.ValueString" ValueChanged="@context.ValueStringChanged"
												 Placeholder="@($"eg. {TfConstants.DateTimeFormatInput}")" Style="width:300px" />
							}
						}
						else if (Item is TucFilterGuid)
						{
							var context = (TucFilterGuid)Item;
							<FluentSelect @bind-SelectedOption="@context.ComparisonMethod"
										  TOption="TucFilterGuidComparisonMethod" Required="true"
										  Items="@(Enum.GetValues<TucFilterGuidComparisonMethod>())" Style="width:140px"
										  OptionText="@((p)=> p.ToString())"></FluentSelect>
							@if (context.RequiresValue)
							{
								<FluentTextField Value="@context.ValueString" ValueChanged="@context.ValueStringChanged"
												 Placeholder="@LOC("enter valid GUID")" Style="width:300px" />
							}
						}
						else if (Item is TucFilterNumeric)
						{
							var context = (TucFilterNumeric)Item;
							<FluentSelect @bind-SelectedOption="@context.ComparisonMethod"
										  TOption="TucFilterNumericComparisonMethod" Required="true"
										  Items="@(Enum.GetValues<TucFilterNumericComparisonMethod>())" Style="width:140px"
										  OptionText="@((p)=> p.ToString())"></FluentSelect>
							@if (context.RequiresValue)
							{
								<FluentNumberField TValue="decimal?" Value="@context.Value" ValueChanged="@context.ValueChanged"
												 Placeholder="@LOC("enter valid decimal")" Style="width:300px" />
							}
						}
						else if (Item is TucFilterText)
						{
							var context = (TucFilterText)Item;
							<FluentSelect @bind-SelectedOption="@context.ComparisonMethod"
										  TOption="TucFilterTextComparisonMethod" Required="true"
										  Items="@(Enum.GetValues<TucFilterTextComparisonMethod>())" Style="width:140px"
										  OptionText="@((p)=> p.ToString())"></FluentSelect>
							@if (context.RequiresValue)
							{
								<FluentTextField Value="@context.Value" ValueChanged="@context.ValueChanged" Style="width:300px" Placeholder="@LOC("no value")" />
							}
						}
					</FluentStack>
				</FluentStack>
				<FluentStack HorizontalAlignment="@HorizontalAlignment.Right">
					<FluentButton Class="" OnClick="_deleteFilterHandler" IconStart="@TfConstants.DeleteIcon.WithColor(Color.Error)"
								  Appearance="@Appearance.Outline" Title="@LOC("delete filter")" />
				</FluentStack>
			</FluentStack>
		</TitleTemplate>
	</TfCard>
}


