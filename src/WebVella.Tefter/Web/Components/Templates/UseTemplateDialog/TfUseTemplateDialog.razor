@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@namespace WebVella.Tefter.Web.Components
@inherits TfBaseComponent
@* Header *@
<FluentDialogHeader ShowDismiss="true">
	<FluentLabel Typo="Typography.PaneHeader">@LOC("Use template")</FluentLabel>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>

	@if (_currentStep == TfUseTemplateDialogStep.Result)
	{
		<FluentStack HorizontalAlignment="@HorizontalAlignment.Center">
			<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Close")</FluentButton>
		</FluentStack>
	}
	else
	{
		<FluentStack HorizontalAlignment="@HorizontalAlignment.Stretch">
			<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Cancel")</FluentButton>
			<FluentStack HorizontalAlignment="@HorizontalAlignment.Right">
				@if (_currentStep == TfUseTemplateDialogStep.SelectTemplate)
				{
					<FluentButton Appearance="Appearance.Neutral" OnClick="@_next" IconEnd="@TfConstants.GetIcon("ArrowRight")">@LOC("Next")</FluentButton>
				}
				else if (_currentStep == TfUseTemplateDialogStep.ResultPreview)
				{
					<FluentButton Appearance="Appearance.Neutral" OnClick="@_back" IconStart="@TfConstants.GetIcon("ArrowLeft")">@LOC("Back")</FluentButton>
					<FluentButton Appearance="Appearance.Accent" OnClick="@_next" IconEnd="@TfConstants.GetIcon("Send")">@LOC("Submit")</FluentButton>
				}
			</FluentStack>
		</FluentStack>
	}

	@if (String.IsNullOrWhiteSpace(_error))
	{
		@*         <FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="_iconBtn"
                      Loading="_isSubmitting" Disabled="_isSubmitting">
            @_btnText
        </FluentButton> *@
	}

</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
	@((MarkupString)_getEmbeddedStyles())
	@if (_loading)
	{
		<TfLoadingPane />
	}
	else if (!string.IsNullOrWhiteSpace(_error))
	{
		<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@_error</FluentMessageBar>
	}
	else if (_currentStep == TfUseTemplateDialogStep.SelectTemplate)
	{
		<FluentSearch Placeholder="@LOC("search...")" AutoComplete="off" Autofocus="true" Value="@_search" ValueChanged="onSearch" Immediate="true" ImmediateDelay="500" />
		<div class="tf-grid-wrapper" style="margin-top:15px;">
			<table class="tf-grid">
				<thead class="tf-grid-thead">
					<tr class="tf-grid-tr">
						<th class="tf-grid-th" style="width:120px;min-width:120px;"></th>
						<th class="tf-grid-th" style="width:30px;min-width:30px;"></th>
						<th class="tf-grid-th">@LOC("name")</th>
						<th class="tf-grid-th">@LOC("type")</th>
					</tr>
				</thead>
				<tbody class="tf-grid-tbody">
					@foreach (var row in _templates)
					{
						var selected = row.Id == _selectedTemplate?.Id;
						var rowProcessor = _getTemplateProcessorInstance(row.ContentProcessorType);
						<tr @key=@(Guid.NewGuid()) class="@($"tf-grid-tr {(selected ? "tf-grid-tr--selected" : "")}")">
							<td class="tf-grid-td">
								<div class="tf-grid-td-selection"></div>
								<div class="tf-grid-td-hover"></div>
								<div>
									@if (selected)
									{
										<FluentButton OnClick="@(_=> _selectTemplate(row))" Appearance="Appearance.Accent" Style="width:100%">selected</FluentButton>
									}
									else
									{
										<FluentButton OnClick="@(_=> _selectTemplate(row))" Appearance="Appearance.Neutral" Style="width:100%">select</FluentButton>
									}

								</div>
							</td>
							<td class="tf-grid-td">
								<div class="tf-grid-td-selection"></div>
								<div class="tf-grid-td-hover"></div>
								<div>
									<FluentIcon Value="@TfConstants.GetIcon(row.FluentIconName).WithColor(Color.Accent)" />
								</div>
							</td>
							<td class="tf-grid-td">
								<div class="tf-grid-td-selection"></div>
								<div class="tf-grid-td-hover"></div>
								<div>
									<div>@row.Name</div>
									<div class="td-description">@row.Description</div>
								</div>
							</td>
							<td class="tf-grid-td">
								<div class="tf-grid-td-selection"></div>
								<div class="tf-grid-td-hover"></div>
								<div>
									<div>@rowProcessor?.Name</div>
									<div class="td-description">@rowProcessor?.Description</div>
								</div>
							</td>
						</tr>
					}
					@if (_templates.Count == 0)
					{
						<tr class="tf-grid-tr">
							<td class="tf-grid-td" colspan="4">
								<div>
									@LOC("There are no templates applicable for this space data!")
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else if (_currentStep == TfUseTemplateDialogStep.ResultPreview)
	{
		<div class="tf-grid-wrapper">
			<table class="tf-grid">
				<tbody class="tf-grid-tbody">
					<tr class="@($"tf-grid-tr")">
						<td class="tf-grid-td" style="max-width:50px;width:50px;">
							<div>
								<FluentIcon Value="@TfConstants.GetIcon(_selectedTemplate.FluentIconName).WithColor(Color.Accent)" />
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div>@_selectedTemplate.Name</div>
								<div class="td-description">@_selectedTemplate.Description</div>
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div>@_processor?.Name</div>
								<div class="td-description">@_processor?.Description</div>
							</div>
						</td>
						<td class="tf-grid-td" style="max-width:120px;width:120px;">
							<div>
								@LOC("{0} rows", Content.SelectedRowIds.Count)
							</div>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
		@if (_processor is null)
		{
			<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@LOC("This template does not have a content processor definition")</FluentMessageBar>
		}
		else
		{
			<TfErrorBoundry>
				<DynamicComponent Type="@_processor.ResultPreviewComponentType" Parameters="@_getResultPreviewDynamicComponentParams()" />
			</TfErrorBoundry>
		}
	}
	else if (_currentStep == TfUseTemplateDialogStep.Result)
	{
		<div class="tf-grid-wrapper">
			<table class="tf-grid">
				<tbody class="tf-grid-tbody">
					<tr class="@($"tf-grid-tr")">
						<td class="tf-grid-td" style="max-width:50px;width:50px;">
							<div>
								<FluentIcon Value="@TfConstants.GetIcon(_selectedTemplate.FluentIconName).WithColor(Color.Accent)" />
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div>@_selectedTemplate.Name</div>
								<div class="td-description">@_selectedTemplate.Description</div>
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div>@_processor?.Name</div>
								<div class="td-description">@_processor?.Description</div>
							</div>
						</td>
						<td class="tf-grid-td" style="max-width:120px;width:120px;">
							<div>
								@LOC("{0} rows", Content.SelectedRowIds.Count)
							</div>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
		@if (_processor is null)
		{
			<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@LOC("This template does not have a content processor definition")</FluentMessageBar>
		}
		else
		{
			<TfErrorBoundry>
				<DynamicComponent Type="@_processor.ResultComponentType" Parameters="@_getResultDynamicComponentParams()" />
			</TfErrorBoundry>
		}
	}

</FluentDialogBody>