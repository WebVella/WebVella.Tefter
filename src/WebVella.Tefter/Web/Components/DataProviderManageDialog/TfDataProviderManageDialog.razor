@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inherits TfFormBaseComponent
@* Header *@
<FluentDialogHeader ShowDismiss="true">
	<FluentStack VerticalAlignment="VerticalAlignment.Center">
		<FluentIcon Value="@_icon" />
		<FluentLabel Typo="Typography.PaneHeader">@_title</FluentLabel>
	</FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
	@if (String.IsNullOrWhiteSpace(_error) && !_isBusy)
	{
		<FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="_icon"
					  Loading="_isSubmitting" Disabled="_isSubmitting">Save</FluentButton>
	}
	<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
	@if (_isBusy)
	{
		<TfLoadingPane />
	}
	else if (!string.IsNullOrWhiteSpace(_error))
	{
		<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@_error</FluentMessageBar>

	}
	else
	{
		<FluentEditForm EditContext="EditContext" OnValidSubmit="_save"
						FormName="submit-form" class="tf-form" novalidate>
			<DataAnnotationsValidator />

			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField Required="true" TextFieldType="@TextFieldType.Text"
									 @bind-Value=_form.Name
									 Label="@LOC("Name")" Style="width:100%" />
					<FluentValidationMessage For="@(() => _form.Name)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=_form.CompositeKeyPrefix
									 Label="@LOC("Composite Key Prefix")" Style="width:100%" />
					<FluentValidationMessage For="@(() => _form.CompositeKeyPrefix)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentSelect Required="true"
								  @bind-SelectedOption="@_form.ProviderType" TOption="ITfDataProviderType"
								  Items="@_allTypes" Style="width:100%"
								  OptionText="@(p => p.Name.ToString())" Label="@LOC("Type")"></FluentSelect>
					<FluentValidationMessage For="@(() => _form.ProviderType)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid Style="margin-top:3px;">
				<FluentGridItem xs="12">
					@if (_form.ProviderType.SettingsComponentType is null) { }
					else if (_form.ProviderType.SettingsComponentType.GetInterface(nameof(ITfDataProviderSettings)) is not null)
					{
						<DynamicComponent Type="_form.ProviderType.SettingsComponentType" Parameters="@_getDynamicComponentParams()"
										  @ref="typeSettingsComponent"></DynamicComponent>
					}
					else
					{
						<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">
							<div>@LOC("Warning: Data provider settings component does not implement ITfDataProviderSettings and cannot be rendered!")</div>
						</FluentMessageBar>
					}
					<FluentValidationMessage For="@(() => _form.SettingsJson)" />
				</FluentGridItem>
			</FluentGrid>
		</FluentEditForm>
	}
</FluentDialogBody>
