@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inherits TfFormBaseComponent
@* Header *@
<FluentDialogHeader ShowDismiss="true">
	<FluentLabel Typo="Typography.PaneHeader">@_title</FluentLabel>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
	@if (String.IsNullOrWhiteSpace(_error))
	{
		<FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="_iconBtn"
					  Loading="_isSubmitting" Disabled="_isSubmitting">@_btnText</FluentButton>
	}
	<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Cancel")</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
	@if (!string.IsNullOrWhiteSpace(_error))
	{
		<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@_error</FluentMessageBar>

	}
	else
	{
		<FluentEditForm EditContext="EditContext" OnValidSubmit="_save"
						FormName="submit-form" class="tf-form" novalidate>
			<DataAnnotationsValidator />
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Email" @bind-Value=UC.Form.Email
									 Label="@LOC("Email")" Style="width:100%" AutoComplete="new-password" />
					<FluentValidationMessage For="@(() => UC.Form.Email)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentInputLabel Label="@LOC("Status")" />
					<FluentCheckbox @bind-Value=UC.Form.Enabled Label="@LOC("Enabled")" Style="margin-top:5px;" />
					<FluentValidationMessage For="@(() => UC.Form.Enabled)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=UC.Form.FirstName
									 Label="@LOC("First Name")" Style="width:100%" AutoComplete="new-password" />
					<FluentValidationMessage For="@(() => UC.Form.FirstName)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=UC.Form.LastName
									 Label="@LOC("Last Name")" Style="width:100%" AutoComplete="new-password" />
					<FluentValidationMessage For="@(() => UC.Form.LastName)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Password" @bind-Value=UC.Form.Password
									 Label="@LOC("Password")" Style="width:100%" AutoComplete="new-password" />
					<FluentValidationMessage For="@(() => UC.Form.Password)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					@if (!_isCreate && String.IsNullOrWhiteSpace(UC.Form.Password))
					{
						<FluentTextField TextFieldType="@TextFieldType.Text" Value="@LOC("leave empty too keep the password")"
										 Label="@LOC("Confirm Password")" Disabled="true"
										 Style="width:100%" />
					}
					else
					{
						<FluentTextField TextFieldType="@TextFieldType.Password" @bind-Value=UC.Form.ConfirmPassword
										 Label="@LOC("ConfirmPassword")" AutoComplete="new-password" Style="width:100%" />
					}
					<FluentValidationMessage For="@(() => UC.Form.ConfirmPassword)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentSelect @bind-SelectedOption="@UC.Form.ThemeMode" TOption="DesignThemeModes"
								  Items="@(Enum.GetValues<DesignThemeModes>())" Style="width:100%"
								  OptionText="@(p => p.ToString())" Label="@LOC("Theme Mode")"></FluentSelect>
					<FluentValidationMessage For="@(() => UC.Form.ThemeMode)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentSelect @bind-SelectedOption="@UC.Form.ThemeColor" TOption="OfficeColor"
								  Items="@(Enum.GetValues<OfficeColor>())" Style="width:100%"
								  OptionText="@(p => p.ToString())" Label="@LOC("Theme Color")" Context="option">
						<OptionTemplate>
							<FluentStack>
								<FluentIcon Value="@TfConstants.RectangleIcon"
											Color="Color.Custom"
											CustomColor="@(option.ToAttributeValue() != "default" ? option.ToAttributeValue() : "#036ac4" )" />
								<FluentLabel>@option</FluentLabel>
							</FluentStack>
						</OptionTemplate>
					</FluentSelect>
					<FluentValidationMessage For="@(() => UC.Form.ThemeColor)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentSelect @bind-SelectedOption="@UC.Form.Culture" TOption="TucCultureOption"
								  OptionValue="@(p => p.CultureCode)"
								  Items="@TfConstants.CultureOptions" Style="width:100%"
								  OptionText="@(p => p.Name)" Label="@LOC("Localization")" />
					<FluentValidationMessage For="@(() => UC.Form.Culture)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="12">
					<FluentInputLabel Label="@LOC("Roles")" />
					<FluentStack Style="margin-top:10px;">
						@foreach (var role in UC.AllRoles)
						{
							<FluentCheckbox Value="@UC.Form.Roles.Any(x=> x.Id == role.Id)" Label="@role.Name"
											ValueChanged="@(()=>UC.Form.OnRoleChange(role))" />
						}
					</FluentStack>
					<FluentValidationMessage For="@(() => UC.Form.Roles)" />
				</FluentGridItem>
			</FluentGrid>
		</FluentEditForm>
	}
</FluentDialogBody>
