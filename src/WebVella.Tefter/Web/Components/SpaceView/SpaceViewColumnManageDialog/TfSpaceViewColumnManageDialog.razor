@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using WebVella.Tefter.Authentication
@namespace WebVella.Tefter.Web.Components
@inherits TfFormBaseComponent
<div>
	@* Header *@
	<FluentDialogHeader ShowDismiss="true">
		<FluentLabel Typo="Typography.PaneHeader">@_title</FluentLabel>
	</FluentDialogHeader>

	@* Body *@
	<FluentDialogBody>

		<FluentEditForm EditContext="EditContext" OnValidSubmit="_save"
						FormName="submit-form" class="tf-form" novalidate>
			<DataAnnotationsValidator />
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@_form.Title
									 Label="@LOC("Title")" Style="width:100%" AutoComplete="off"/>
					<FluentValidationMessage For="@(() => _form.Title)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@_form.QueryName
									 Label="@LOC("Query Name")" Style="width:100%" AutoComplete="off" />
					<FluentValidationMessage For="@(() => _form.QueryName)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="4">
					<FluentInputLabel Label="@LOC("Icon")" />
					<TfSelectIcon @bind-Value=@_form.Icon />
					<FluentValidationMessage For="@(() => _form.Icon)" />
				</FluentGridItem>
				<FluentGridItem xs="2">
					<FluentInputLabel Label="@LOC("Only icon")" />
					<FluentSwitch @bind-Value=@_form.OnlyIcon/>
					<FluentValidationMessage For="@(() => _form.OnlyIcon)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					<FluentNumberField TValue="short?" @bind-Value=@_form.Position AutoComplete="off"
									   Label="@LOC("Insert in position")" Style="width:100%" Placeholder="@LOC("leave empty for last")" />
					<FluentValidationMessage For="@(() => _form.Position)" />
				</FluentGridItem>
			</FluentGrid>
			<FluentGrid>
				<FluentGridItem xs="6">
					<FluentInputLabel Label="@LOC("Column type")" />
					<FluentStack HorizontalGap="5">
						@if (_selectedColumnType?.FluentIcon is null)
						{
							<FluentButton Appearance="@Appearance.Outline" />
						}
						else
						{
							<FluentButton Appearance="@Appearance.Outline" IconStart="@_selectedColumnType?.FluentIcon" />
						}
						<FluentSelect Style="width:100%"
									  TOption="TucSpaceViewColumnType"
									  Placeholder="@LOC("select...")"
									  OptionSelected="(x => x.Id == _form.TypeId)"
									  SelectedOption="@_selectedColumnType"
									  SelectedOptionChanged="_columnTypeChangeHandler"
									  OptionText="((x)=> x.Name)"
									  OptionValue="((x)=> x.Id.ToString())"
									  Items="TfAppState.Value.AvailableColumnTypes">
							<OptionTemplate Context="option">
								<FluentStack>
									<FluentIcon Value="@option.FluentIcon" Color="@Color.Accent" />
									@option.Name
								</FluentStack>
							</OptionTemplate>
						</FluentSelect>
					</FluentStack>
					<FluentValidationMessage For="@(() => _form.TypeId)" />
				</FluentGridItem>
				<FluentGridItem xs="6">
					@if (_renderComponentTypeSelect)
					{
						<FluentSelect Label="@LOC("Presentation component")"
									  Style="width:100%" Required=true
									  OptionSelected="(x => x.Id == _form.ComponentId)"
									  SelectedOption="@_selectedColumnComponent"
									  SelectedOptionChanged="_columnComponentChangeHandler"
									  TOption="TucSpaceViewColumnComponent"
									  OptionText="((x)=> x.Name)"
									  OptionValue="((x)=> x.Id.ToString())"
									  Items="_selectedColumnTypeComponents" />

						<FluentValidationMessage For="@(() => _form.ComponentId)" />
					}
				</FluentGridItem>
			</FluentGrid>

			<FluentValidationMessage For="@(() => _form.DataMapping)" />
			<FluentValidationMessage For="@(() => _form.DataMapping)" />
			<FluentValidationMessage For="@(() => _form.Settings.Width)" />
			<FluentValidationMessage For="@(() => _form.Settings.Color)" />
			<FluentTabs @bind-ActiveTabId="@_activeTab" Class="tf-tabs">
				<FluentTab Label="@LOC("Data mapping")" Id="data">
					@if (_selectedColumnType is not null && _selectedColumnComponent is not null)
					{
						@if (_selectedColumnType.DataMapping is not null
											&& _selectedColumnType.DataMapping.Count > 0)
						{
							foreach (var item in _selectedColumnType.DataMapping)
							{
								<FluentGrid>
									<FluentGridItem xs="6">
										<FluentTextField TextFieldType="@TextFieldType.Text" Value=@item.Alias Immediate ImmediateDelay="500"
														 Disabled="true" Label="@LOC("Component alias")" Style="width:100%" AutoComplete="off" />
									</FluentGridItem>
									<FluentGridItem xs="6">
										<FluentCombobox TOption="string"
														Autocomplete="ComboboxAutocomplete.Both"
														Items="_options"
														Height="@TfConstants.ComboPanelHeight"
														Value=@_getDataMappingValue(item.Alias)
														Immediate ImmediateDelay="500" ValueChanged="@((x) => _dataMappingValueChanged(x,item.Alias))"
														Label="@LOC("Data column name")" Style="width:100%" />
									</FluentGridItem>
								</FluentGrid>
							}
							<FluentGrid>
								<FluentGridItem xs="6">
									<FluentInputLabel Label="@LOC("Sort by alias")" />
									<div>
										@foreach (var item in _selectedColumnType.SortAliases)
										{
											<FluentBadge Appearance="@Appearance.Neutral">@item</FluentBadge>
										}
										@if (_selectedColumnType.SortAliases.Count == 0)
										{
											<FluentLabel Color="@Color.Disabled" Typo="@Typography.Body">@LOC("column cannot be sorted")</FluentLabel>
										}
									</div>
								</FluentGridItem>
								<FluentGridItem xs="6">
									<FluentInputLabel Label="@LOC("Filter by alias")" />
									<div>
										@foreach (var item in _selectedColumnType.FilterAliases)
										{
											<FluentBadge Appearance="@Appearance.Neutral">@item</FluentBadge>
										}
										@if (_selectedColumnType.FilterAliases.Count == 0)
										{
											<FluentLabel Color="@Color.Disabled" Typo="@Typography.Body">@LOC("column cannot be filtered")</FluentLabel>
										}
									</div>
								</FluentGridItem>
							</FluentGrid>
						}
						else
						{
							<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("This component does not require data mapping")" AllowDismiss="false" />
						}
					}
					else
					{
						<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("Please select data provider first")" AllowDismiss="false" />
					}
				</FluentTab>
				<FluentTab Label="@LOC("Component options")" Id="component-options">
					@if (_selectedColumnType is not null && _selectedColumnComponent is not null)
					{
						<FluentGrid>
							<FluentGridItem xs="12">
								@if (_selectedColumnComponent is not null)
								{
									<TfErrorBoundry>
										<DynamicComponent Type="_selectedColumnComponent.Type" Parameters="@_getColumnComponentContext()" />
									</TfErrorBoundry>
								}
								else
								{
									<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning" Title="@LOC("Warning")">
										<div>@LOC(" Data provider settings component does not implement ITfDataProviderSettings and cannot be rendered!")</div>
									</FluentMessageBar>
								}
							</FluentGridItem>
						</FluentGrid>
					}
					else
					{
						<FluentMessageBar Intent="@MessageIntent.Info" Title="@LOC("Please select data provider first")" AllowDismiss="false" />
					}
				</FluentTab>
				<FluentTab Label="@LOC("Styling")" Id="styling">
					<div>@(JsonSerializer.Serialize(_form.Settings))</div>
					<FluentGrid>
						<FluentGridItem xs="6">
							<FluentNumberField TValue="short?" @bind-Value="_form.Settings.Width" AutoComplete="off"
											   Label="@LOC("Width, px")" Style="width:100%" Placeholder="@LOC("auto")" />
						</FluentGridItem>
						<FluentGridItem xs="6">
						</FluentGridItem>
					</FluentGrid>
					<FluentGrid>
						<FluentGridItem xs="6">
							<FluentInputLabel Label="@LOC("Color")" />
							<TfSelectColor @bind-Value=@_form.Settings.Color />
						</FluentGridItem>
						<FluentGridItem xs="6">
							<FluentInputLabel Label="@LOC("Background Color")" />
							<TfSelectColor @bind-Value=@_form.Settings.BackgroundColor />
						</FluentGridItem>
					</FluentGrid>
				</FluentTab>
			</FluentTabs>
		</FluentEditForm>
	</FluentDialogBody>

	@* Footer *@
	<FluentDialogFooter>
		@if (String.IsNullOrWhiteSpace(_error))
		{
			<FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="_iconBtn"
						  Loading="_isSubmitting" Disabled="_isSubmitting">@_btnText</FluentButton>
		}
		<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Cancel")</FluentButton>
	</FluentDialogFooter>
</div>