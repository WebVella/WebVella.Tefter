@namespace WebVella.Tefter.Web.Components
@inherits TfBaseComponent
@if (TfAppState.Value.Space is null)
{
	<TfLayoutBodyMain>
		<Header>
			<TfPageHeader>@LOC("Space View")</TfPageHeader>
		</Header>
		<ChildContent>
			<FluentMessageBar Title="No space found"
							  Style="@("border: 1px solid var(--neutral-base-color)")"
							  Intent="MessageIntent.Info"
							  AllowDismiss="false">
				No spaces found yet notification
			</FluentMessageBar>
		</ChildContent>
	</TfLayoutBodyMain>
}
else
{
	@* 	@if (TfUserState.Value.SidebarExpanded)
	{
	<FluentStack Orientation="Orientation.Vertical" Class="sidebar with-toolbar" Style="@TfAppState.Value.SpaceSidebarStyle">
	<TfSpaceViewNavigation />
	</FluentStack>
	} *@

	@if (TfAppState.Value.SpaceViewList.Count == 0)
	{
		<TfLayoutBodyMain>
			<Header>
				<TfPageHeader>@LOC("Space View")</TfPageHeader>
			</Header>
			<ChildContent>
				<FluentMessageBar Title="No existing views"
								  Style="@("border: 1px solid var(--neutral-base-color)")"
								  Intent="MessageIntent.Info"
								  AllowDismiss="false">
					Space views not created yet
				</FluentMessageBar>
			</ChildContent>
		</TfLayoutBodyMain>
	}
	else if (TfAppState.Value.SpaceView is null)
	{
		<TfLayoutBodyMain>
			<Header>
				<TfPageHeader>@LOC("Space View")</TfPageHeader>
			</Header>
			<ChildContent>
				<FluentMessageBar Title="No space view found"
								  Style="@("border: 1px solid var(--neutral-base-color)")"
								  Intent="MessageIntent.Info"
								  AllowDismiss="false">
					Space view not found
				</FluentMessageBar>
			</ChildContent>
		</TfLayoutBodyMain>
	}
	else
	{
		var configCss = _generateColumnConfigurationCss(TfAppState.Value.SpaceView, TfAppState.Value.SpaceViewColumns);
		var columnIndex = 1;
		@((MarkupString)_getEmbeddedStyles())
		<TfLayoutBodyMain ContentClass="no-padding">
			<Header>
				<TfPageHeader>@((MarkupString)$"{TfAppState.Value.SpaceView.Name}{_generatePresetPathHtml()}")</TfPageHeader>
			</Header>
			<Toolbar>
				<TfSpaceViewToolbar OnSearch="_onSearch" OnFilter="_onFilter" OnSort="_onSort" OnClearFilter="_onClearFilter"
									OnSelectAll="_onSelectAll" SelectAllLoading="_selectAllLoading" OnDeSelectAll="_onDeSelectAll" />
			</Toolbar>
			<ChildContent>
				<div class="tf-grid-wrapper">
					<table class="tf-grid">
						<colgroup>
							@foreach (var index in configCss.Keys)
							{
								<col span="1" style="@(configCss[index].Item1 is null ? "" : $"width: {configCss[index].Item1.Value}px;min-width:{configCss[index].Item1.Value}px" )">
							}
						</colgroup>
						<thead class="tf-grid-thead">
							<tr class="tf-grid-thead-bkg"></tr>
							<tr class="tf-grid-tr">
								<th class="tf-grid-th tf-grid-th--check @configCss[0].Item2" style="@($"{configCss[0].Item3}")">
									<div class="check-content">
										@if (TfAppState.Value.AllDataRowsSelected)
										{
											<FluentButton OnClick="@(() =>_toggleSelectAll(false))" BackgroundColor="transparent" Color="transparent">
												<FluentIcon Value="@TfConstants.GetIcon("CheckboxChecked",variant: IconVariant.Filled)" Color="@Color.Accent" />
											</FluentButton>
										}
										else
										{
											<FluentButton OnClick="@(() =>_toggleSelectAll(true))" BackgroundColor="transparent" Color="transparent">
												<FluentIcon Value="@TfConstants.GetIcon("CheckboxUnchecked")" Color="@Color.Custom" CustomColor="var(--neutral-stroke-input-active)" />
											</FluentButton>
										}
									</div>
								</th>
								@foreach (var column in TfAppState.Value.SpaceViewColumns.OrderBy(x => x.Position))
								{
									<th data-query-name="@column.QueryName" class="tf-grid-th @configCss[columnIndex].Item2" style="@($"{column.HeaderStyle}{configCss[columnIndex].Item3}")">
										<div>
											@if (String.IsNullOrWhiteSpace(column.Icon))
											{
												<div>@column.Title</div>

											}
											else if (column.OnlyIcon)
											{
												<div style="display:flex;">
													<FluentIcon Value="@TfConstants.GetIcon(column.Icon)" />
												</div>
											}
											else
											{
												<div style="display:flex">
													<FluentIcon Value="@TfConstants.GetIcon(column.Icon)" />
													<div style="padding-left:5px;">@column.Title</div>
												</div>
											}
										</div>
									</th>
									columnIndex++;
								}
							</tr>
						</thead>
						<tbody class="tf-grid-tbody">
							@if (_isDataLoading)
							{
								<tr class="tf-grid-tr">
									<td class="tf-grid-td" colspan="@(TfAppState.Value.SpaceViewColumns.Count + 1)"><div>@LOC("Loading...")</div></td>
								</tr>
							}
							else if (TfAppState.Value.SpaceViewData is null)
							{
								<tr class="tf-grid-tr">
									<td class="tf-grid-td" colspan="@(TfAppState.Value.SpaceViewColumns.Count + 1)"><div>@LOC("Space dataset not found")</div></td>
								</tr>
							}
							else if (TfAppState.Value.SpaceViewData.Rows.Count == 0)
							{
								<tr class="tf-grid-tr">
									<td class="tf-grid-td" colspan="@(TfAppState.Value.SpaceViewColumns.Count + 1)"><div>@LOC("No data")</div></td>
								</tr>
							}
							else
							{
								for (int i = 0; i < TfAppState.Value.SpaceViewData.Rows.Count; i++)
								{
									var index = i;
									columnIndex = 1;
									var selected = _getItemSelection(index);
									<tr @key=@index class="@($"tf-grid-tr {(selected ? "tf-grid-tr--selected" : "")}")">
										<td class="tf-grid-td tf-grid-td--check @configCss[0].Item2" style="@($"background:var(--neutral-fill-layer-rest);{configCss[0].Item3}")">
											<div class="tf-grid-td-selection"></div>
											<div class="tf-grid-td-hover"></div>
											<div class="check-content">
												@if (TfAppState.Value.SpaceViewData.Rows[i][TfConstants.TEFTER_ITEM_ID_PROP_NAME] is not null)
												{
													@if (selected)
													{
														<FluentButton OnClick="@(() =>_toggleItemSelection(index,false))" BackgroundColor="transparent" Color="transparent">
															<FluentIcon Value="@TfConstants.GetIcon("CheckboxChecked",variant:IconVariant.Filled)" Color="@Color.Accent" />
														</FluentButton>
													}
													else
													{
														<FluentButton OnClick="@(() =>_toggleItemSelection(index,true))" BackgroundColor="transparent" Color="transparent">
															<FluentIcon Value="@TfConstants.GetIcon("CheckboxUnchecked")" Color="@Color.Custom" CustomColor="var(--neutral-stroke-input-active)" />
														</FluentButton>
													}
												}
											</div>

										</td>
										@foreach (var column in TfAppState.Value.SpaceViewColumns)
										{
											<td class="tf-grid-td @configCss[columnIndex].Item2" style="@($"{configCss[columnIndex].Item3}")">
												<div class="tf-grid-td-color" style="@column.CellColorStyle"></div>
												<div class="tf-grid-td-selection"></div>
												<div class="tf-grid-td-hover"></div>
												@if (_componentMetaDict.ContainsKey(column.ComponentId))
												{
													<TfErrorBoundry ShowErrorDetails=false>
														<DynamicComponent Type="_componentMetaDict[column.ComponentId].Type" Parameters="@_getColumnComponentContext(column, TfAppState.Value.SpaceViewData,index)" />
													</TfErrorBoundry>
												}
											</td>
											columnIndex++;
										}
									</tr>
								}
							}
						</tbody>
					</table>
				</div>
			</ChildContent>
			<Footer>
				<div class="tf-grid__pager">
					<TfPager Page="@(TfAppState.Value.Route.Page ?? 1)" PageSize="@(TfAppState.Value.Route.PageSize ?? TfConstants.PageSize)"
							 GoLast="@_goLastPage" GoNext="@_goNextPage"
							 GoFirst="@_goFirstPage" GoPrevious="@_goPreviousPage" GoOnPage="@_goOnPage" ChangePageSize="_pageSizeChange" />
				</div>
			</Footer>
		</TfLayoutBodyMain>
	}
}
