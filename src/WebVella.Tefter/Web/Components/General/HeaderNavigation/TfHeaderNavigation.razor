@namespace WebVella.Tefter.Web.Components
@inherits TfBaseComponent
@if (TfAppState.Value.SpaceView is not null
		&& TfAppState.Value.Route.SpaceNodeId is not null
			&& TfAppState.Value.SpaceView.Presets.Count > 0)
{
	var selectionDict = _generateSelectionDict();
	<div class="tf-header-nav" style="@($"--space-color: {TfAppState.Value.SpaceColorString};")">
		<FluentAnchor Href="#" OnClick="@(_=> _onClick(null))" Appearance="@Appearance.Outline"
					  Id="space-view-unfiltered"
					  Class="@(TfAppState.Value.Route.SpaceViewPresetId is null ? "main-active" : "")">
			<FluentIcon Value="@TfConstants.SpaceViewIcon" Color="@Color.Custom" CustomColor="@TfAppState.Value.SpaceIconColorString" />
		</FluentAnchor>
		@foreach (var item in TfAppState.Value.SpaceView.Presets)
		{
			if (!item.IsGroup)
			{
				<FluentAnchor Id="@($"tf-{item.Id}")" Href="#" Appearance="@Appearance.Outline" OnClick="@(_=> _onClick(item.Id))"
							  Class="@(selectionDict[item.Id].Contains(TfAppState.Value.Route.SpaceViewPresetId ?? Guid.Empty) ? "main-active" : "")">
					@if (!String.IsNullOrWhiteSpace(item.Icon))
					{
						<FluentIcon Slot="start" Value="@TfConstants.GetIcon(item.Icon)" />
					}
					@item.Name
					@if (item.Color != TfColor.Black)
					{
						<span class="tf-addon" style="@($"background-color:{item.Color.ToColorString()}")"></span>
					}
				</FluentAnchor>
			}
			else
			{
				<FluentAnchor Href="#" Id="@($"tf-{item.Id}")"
							  OnClick="@(_=> _toggleMenu(item.Id))" Appearance="@Appearance.Outline"
							  Class="@(selectionDict[item.Id].Contains(TfAppState.Value.Route.SpaceViewPresetId ?? Guid.Empty) ? "main-active" : "")">
					@if (!String.IsNullOrWhiteSpace(item.Icon))
					{
						<FluentIcon Slot="start" Value="@TfConstants.GetIcon(item.Icon)" />
					}
					@item.Name
					@if (item.Nodes.Count > 0)
					{
						<FluentIcon Slot="end" Value="@TfConstants.GetIcon("ChevronDown")" />
					}
					@if (item.Color != TfColor.Black)
					{
						<span class="tf-addon" style="@($"background-color:{item.Color.ToColorString()}")"></span>
					}
				</FluentAnchor>
				@if (item.Nodes.Count > 0)
				{
					<FluentMenu UseMenuService="true"
								Open="(_opendedNode == item.Id)"
								OpenChanged="@(x => _toggleMenu(item.Id,x))"
								Anchor="@($"tf-{item.Id}")">
						@foreach (var node in item.Nodes)
						{
							<TfSpaceViewHeaderNavigationItem @key=node.Id Item="node" OnClick="@(x=> _onClick(x))"
															 SelectionDictionary="selectionDict" ActivePresetId="TfAppState.Value.Route.SpaceViewPresetId" />
						}
					</FluentMenu>
				}

			}
		}
		@* 		<FluentAnchor Href="#" Appearance="@Appearance.Outline">
	<FluentIcon Value="@TfConstants.AddIcon" Color="@Color.Custom" CustomColor="@TfAppState.Value.SpaceIconColorString" />
	</FluentAnchor> *@


	</div>
}

