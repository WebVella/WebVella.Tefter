@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@namespace WebVella.Tefter.Web.Components
@inherits TfBaseComponent
<div>
	@if (Item is TucFilterAnd || Item is TucFilterOr)
	{
		<TfCard Small="true" Class="card-logical">
			<TitleTemplate>
				<FluentStack VerticalAlignment="@VerticalAlignment.Center">
					<FluentStack HorizontalGap="0" HorizontalAlignment="@HorizontalAlignment.Left">
						<FluentLabel Typo="@Typography.Body">@TucFilterBase.GetColumnName(Item) @Item.Id</FluentLabel>
						<FluentLabel Typo="@Typography.Body" Style="margin-left:0.5rem;color:var(--neutral-foreground-rest);opacity:0.5">@TucFilterBase.GetFieldType(Item)</FluentLabel>
					</FluentStack>
					@if (!ReadOnly)
					{
						<FluentStack HorizontalAlignment="@HorizontalAlignment.Right" VerticalAlignment="@VerticalAlignment.Center">
							@if (SelectedProvider is null)
							{
								<FluentBadge Appearance="Appearance.Accent">@LOC("no data provider")</FluentBadge>
							}
							else if (SelectedProvider.ColumnsPublic.Count == 0)
							{
								<FluentBadge Appearance="Appearance.Accent">@LOC("no columns")</FluentBadge>
							}
							else
							{
								<FluentSelect @bind-SelectedOption="@_selectedFilterColumn"
											  TOption="string" Required="false"
											  Items="@AllColumnOptions" Style="width:140px"
											  Placeholder="@LOC("select...")"></FluentSelect>
								<FluentButton Disabled="@Disabled" OnClick="@_addColumnFilterHandler" IconStart="@TfConstants.AddIcon.WithColor(Color.Accent)" Appearance="@Appearance.Outline">@LOC("Column")</FluentButton>
							}
							<FluentButton Disabled="@Disabled" OnClick="@(() => AddFilter.InvokeAsync((typeof(TucFilterAnd),null,Item.Id)))" IconStart="@TfConstants.AddIcon.WithColor(Color.Accent)" Appearance="@Appearance.Outline">@LOC("AND")</FluentButton>
							<FluentButton Disabled="@Disabled" OnClick="@(() => AddFilter.InvokeAsync((typeof(TucFilterOr),null,Item.Id)))" IconStart="@TfConstants.AddIcon.WithColor(Color.Accent)" Appearance="@Appearance.Outline">@LOC("OR")</FluentButton>
							<FluentButton Disabled="@Disabled" OnClick="_deleteFilterHandler" IconStart="@TfConstants.DeleteIcon.WithColor(Color.Error)"
										  Appearance="@Appearance.Outline" Title="@LOC("delete filter")" />
						</FluentStack>
					}
				</FluentStack>

			</TitleTemplate>
			<ChildContent>
				@if (TucFilterBase.GetChildFilters(Item).Count == 0)
				{
					<div>@LOC("No filters added yet")</div>
				}
				@foreach (var item in TucFilterBase.GetChildFilters(Item))
				{
					<TfFilterManage Item="item" Disabled="@Disabled"
									SelectedProvider="SelectedProvider"
									AddFilter="@((x) => AddFilter.InvokeAsync((x.Item1,x.Item2,x.Item3)))"
									AddColumnFilter="@((x) => AddColumnFilter.InvokeAsync((x.Item1,x.Item2)))"
									RemoveColumnFilter="@((x) => RemoveColumnFilter.InvokeAsync(x))"
									UpdateColumnFilter="@((x) => UpdateColumnFilter.InvokeAsync(x))" ReadOnly="ReadOnly" />
				}
			</ChildContent>
		</TfCard>
	}
	else
	{
		<TfCard Small="true" Class="card-rule">
			<TitleTemplate>
				<FluentStack VerticalAlignment="@VerticalAlignment.Center">
					<FluentStack HorizontalAlignment="@HorizontalAlignment.Left" VerticalAlignment="@VerticalAlignment.Center">
						<FluentStack HorizontalAlignment="@HorizontalAlignment.Right" Style="flex:0 0 20px">
							@if (AllColumnOptions is not null && AllColumnOptions.Contains(Item.ColumnName))
							{
								<FluentIcon Value="@TfConstants.GetIcon("CheckmarkCircle")" Color="@Color.Success" Title="@LOC("found in provider")"></FluentIcon>
							}
							else
							{
								<FluentIcon Value="@TfConstants.GetIcon("ErrorCircle")" Color="@Color.Error" Title="@LOC("not found in provider")"></FluentIcon>
							}
						</FluentStack>
						<FluentStack HorizontalAlignment="@HorizontalAlignment.Left" Wrap="false" Style="flex:0 0 300px"
									 VerticalAlignment="@VerticalAlignment.Center">
							<FluentLabel Typo="@Typography.Body">@TucFilterBase.GetColumnName(Item)</FluentLabel>
							<FluentLabel Typo="@Typography.Body" Style="color:var(--neutral-foreground-rest);opacity:0.5">@TucFilterBase.GetFieldType(Item)</FluentLabel>
						</FluentStack>
						<FluentStack HorizontalAlignment="@HorizontalAlignment.Left" Wrap="false"
									 Style="flex:1 1 auto"
									 VerticalAlignment="@VerticalAlignment.Center">

							@if (Item is TucFilterBoolean)
							{
								var context = (TucFilterBoolean)Item;
								<FluentSelect SelectedOption="@context.ComparisonMethod"
											  SelectedOptionChanged="@((value) => _valueChanged(context,nameof(context.ComparisonMethod),value))"
											  Disabled="@(Disabled || ReadOnly)"
											  TOption="TucFilterBooleanComparisonMethod" Required="true"
											  Items="@(Enum.GetValues<TucFilterBooleanComparisonMethod>())" Style="width:140px"
											  OptionText="@((p)=> LOC(p.ToDescriptionString()))"></FluentSelect>
								@if (context.RequiresValue)
								{
									<FluentSelect Value="@context.ValueString"
												  SelectedOptionChanged="@((value) => _valueChanged(context,nameof(context.Value),value))"
												  Disabled="@(Disabled || ReadOnly)"
												  TOption="Option<string>" Required="false"
												  OptionText="@((p)=> p.Text)"
												  OptionValue="@((p)=> p.Value)"
												  Items="@context.ValueOptions" Style="width:300px"></FluentSelect>
								}
							}
							else if (Item is TucFilterDateTime)
							{
								var context = (TucFilterDateTime)Item;
								<FluentSelect SelectedOption="@context.ComparisonMethod"
											  SelectedOptionChanged="@((value) => _valueChanged(context,nameof(context.ComparisonMethod),value))"
											  Disabled="@(Disabled || ReadOnly)"
											  TOption="TucFilterDateTimeComparisonMethod" Required="true"
											  Items="@(Enum.GetValues<TucFilterDateTimeComparisonMethod>())" Style="width:140px"
											  OptionText="@((p)=> LOC(p.ToDescriptionString()))"></FluentSelect>
								@if (context.RequiresValue)
								{
									<FluentStack HorizontalGap="2">
										<FluentTextField Value="@context.ValueString"
														 ValueChanged="@((value) => _valueChanged(context,nameof(context.Value),value))"
														 Disabled="@Disabled" ReadOnly="ReadOnly"
														 AutoComplete="new-password"
														 Placeholder="@($"{TfConstants.DateTimeFormatInput}, now()... ")" Style="width:300px" />
										<FluentButton Id="@($"tf-{context.Id}")" IconStart="@TfConstants.HelpIcon" Disabled=true/>
										<FluentTooltip Anchor="@($"tf-{context.Id}")">
											@((MarkupString)LOC("for dynamic date use one of the following:{0}", "<br/> now(+- decimal hours),<br/> day(+- decimal days),<br/> month(+- decimal months),<br/> year(+- decimal year)"))
										</FluentTooltip>
									</FluentStack>
								}
							}
							else if (Item is TucFilterGuid)
							{
								var context = (TucFilterGuid)Item;
								<FluentSelect SelectedOption="@context.ComparisonMethod"
											  SelectedOptionChanged="@((value) => _valueChanged(context,nameof(context.ComparisonMethod),value))"
											  Disabled="@(Disabled || ReadOnly)"
											  TOption="TucFilterGuidComparisonMethod" Required="true"
											  Items="@(Enum.GetValues<TucFilterGuidComparisonMethod>())" Style="width:140px"
											  OptionText="@((p)=> LOC(p.ToDescriptionString()))"></FluentSelect>
								@if (context.RequiresValue)
								{
									<FluentTextField Value="@context.ValueString"
													 ValueChanged="@((value) => _valueChanged(context,nameof(context.Value),value))"
													 Disabled="@Disabled" ReadOnly="ReadOnly"
													 AutoComplete="new-password"
													 Placeholder="@LOC("enter valid GUID")" Style="width:300px" />
								}
							}
							else if (Item is TucFilterNumeric)
							{
								var context = (TucFilterNumeric)Item;
								<FluentSelect SelectedOption="@context.ComparisonMethod"
											  SelectedOptionChanged="@((value) => _valueChanged(context,nameof(context.ComparisonMethod),value))"
											  Disabled="@(Disabled || ReadOnly)"
											  TOption="TucFilterNumericComparisonMethod" Required="true"
											  Items="@(Enum.GetValues<TucFilterNumericComparisonMethod>())" Style="width:140px"
											  OptionText="@((p)=> LOC(p.ToDescriptionString()))"></FluentSelect>
								@if (context.RequiresValue)
								{
									<FluentNumberField TValue="decimal?" Value="@context.Value"
													   ValueChanged="@((value) => _valueChanged(context,nameof(context.Value),value))"
													   Disabled="@Disabled" ReadOnly="ReadOnly"
													   Placeholder="@LOC("enter valid decimal")" Style="width:300px" />
								}
							}
							else if (Item is TucFilterText)
							{
								var context = (TucFilterText)Item;
								<FluentSelect SelectedOption="@context.ComparisonMethod"
											  SelectedOptionChanged="@((value) => _valueChanged(context,nameof(context.ComparisonMethod),value))"
											  Disabled="@(Disabled || ReadOnly)"
											  TOption="TucFilterTextComparisonMethod" Required="true"
											  Items="@(Enum.GetValues<TucFilterTextComparisonMethod>())" Style="width:140px"
											  OptionText="@((p)=> LOC(p.ToDescriptionString()))"></FluentSelect>
								@if (context.RequiresValue)
								{
									<FluentTextField AutoComplete="new-password"
													 Value="@context.Value"
													 Disabled="@Disabled" ReadOnly="ReadOnly"
													 ValueChanged="@((value) => _valueChanged(context,nameof(context.Value),value))"
													 Style="width:300px" Placeholder="@LOC("no value")" />
								}
							}
						</FluentStack>
					</FluentStack>
					<FluentStack HorizontalAlignment="@HorizontalAlignment.Right" VerticalAlignment="@VerticalAlignment.Center">
						@if (!ReadOnly)
						{
							<FluentButton Disabled="@Disabled" OnClick="_deleteFilterHandler" IconStart="@TfConstants.DeleteIcon.WithColor(Color.Error)"
										  Appearance="@Appearance.Outline" Title="@LOC("delete filter")" />
						}
					</FluentStack>
				</FluentStack>
			</TitleTemplate>
		</TfCard>
	}

</div>
