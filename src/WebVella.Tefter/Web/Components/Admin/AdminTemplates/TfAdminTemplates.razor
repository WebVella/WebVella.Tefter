@namespace WebVella.Tefter.Web.Components
@inherits TfBaseComponent

<div class="tf-admin-shared-columns-toolbar" style="display:flex;justify-content:space-between;margin-bottom:1rem;">
	<div>
		<FluentSearch Placeholder="@LOC("search...")" ValueChanged="_searchValueChanged" Value="@_search" AutoComplete="off" />
	</div>
	<div>
		<FluentButton Appearance="@Appearance.Outline" OnClick="_addTemplate">
			@LOC("Template")
			<FluentIcon Value="@TfConstants.AddIcon" Color="@Color.Accent" Slot="start" />
		</FluentButton>
	</div>
</div>
@if (String.IsNullOrWhiteSpace(_search) && (TfAppState.Value.AdminTemplateList is null || TfAppState.Value.AdminTemplateList.Count == 0))
{
	<FluentMessageBar Title="@LOC("No templates")" AllowDismiss="false"
					  Intent="@MessageIntent.Info">@LOC("No templates are created yet")</FluentMessageBar>
}
else if (!String.IsNullOrWhiteSpace(_search) && (TfAppState.Value.AdminTemplateList is null || TfAppState.Value.AdminTemplateList.Count == 0))
{
	<FluentMessageBar Title="@LOC("No templates found")" AllowDismiss="false"
					  Intent="@MessageIntent.Info">@LOC("No templates are found for this search")</FluentMessageBar>
}
else
{
	<div class="tf-grid-wrapper">
		<table class="tf-grid">
			<thead class="tf-grid-thead">
				<tr class="tf-grid-thead-bkg" style="@($"background-color:{TfConstants.AdminBackgkroundColor}")"></tr>
				<tr class="tf-grid-tr">
					<th class="tf-grid-th" style="width:100px;min-width:100px;"></th>
					<th class="tf-grid-th" style="width:100px;min-width:100px;">status</th>
					<th class="tf-grid-th" style="width:30px;min-width:30px;">icon</th>
					<th class="tf-grid-th">name</th>
					<th class="tf-grid-th">processor</th>
					<th class="tf-grid-th">required columns</th>
					<th class="tf-grid-th" style="width:120px;min-width:120px;">date</th>
				</tr>
			</thead>
			<tbody class="tf-grid-tbody">
				@foreach (var context in _getTemplates())
				{
					<tr @key=context.Id class="tf-grid-tr">
						<td class="tf-grid-td">
							<div>
								<FluentStack Wrap="false">
									<FluentAnchor Href="@(String.Format(TfConstants.AdminTemplatesTemplatePageUrl, (int)TfAppState.Value.Route.TemplateResultType,context.Id))"
												  Appearance="@Appearance.Outline">
										<FluentIcon Value="@TfConstants.ViewIcon" Title="@LOC("View template")" />
									</FluentAnchor>
									<FluentButton Appearance="@Appearance.Outline" Title="@LOC("Delete template")"
												  OnClick="@(() => _deleteColumn(context))">
										<FluentIcon Color="@Color.Error" Value="@TfConstants.DeleteIcon" />
									</FluentButton>
								</FluentStack>
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div style="margin-bottom:5px;width:100%">
									@if (context.IsEnabled)
									{
										<FluentBadge Style="display:block" Appearance="@Appearance.Neutral">@LOC("enabled")</FluentBadge>
									}
									else
									{
										<FluentBadge Style="display:block" Fill="somevalue" BackgroundColor="@OfficeColor.Access.ToAttributeValue()" Color="white">@LOC("disabled")</FluentBadge>
									}
								</div>
								<div style="width:100%">
									@if (context.IsSelectable)
									{
										<FluentBadge Style="display:block" Appearance="@Appearance.Neutral">@LOC("selectable")</FluentBadge>
									}
									else
									{
										<FluentBadge Style="display:block" Fill="somevalue" BackgroundColor="@OfficeColor.Access.ToAttributeValue()" Color="white">@LOC("not selectable")</FluentBadge>
									}
								</div>
							</div>
						</td>
						<td class="tf-grid-td">
							<div><FluentIcon Value="@TfConstants.GetIcon(context.FluentIconName).WithColor(Color.Neutral)" /></div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div>@context.Name</div>
								<div class="td-description">@context.Description</div>
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								@if (context.ContentProcessorType is not null
													&& context.ContentProcessorType.GetInterface(nameof(ITfTemplateProcessor)) != null)
								{
									var component = (ITfTemplateProcessor)Activator.CreateInstance(context.ContentProcessorType);
									<div>@component.Name</div>
									<div class="td-description">@component.Description</div>
								}
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								@(String.Join(", ", context.UsedColumns))
							</div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div>@context.ModifiedOn.ToString(TfConstants.DateHourFormat)</div>
								@if (context.ModifiedBy is not null)
								{
									<div class="td-description">by: @context.ModifiedBy.Names</div>
								}
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

}

