@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using WebVella.Tefter.Authentication
@namespace WebVella.Tefter.Web.Components
@inherits TfBaseComponent

@* Header *@
<FluentDialogHeader ShowDismiss="true" Class="modal-with-tabs">
	<div class="modal-with-tabs__title">
		<FluentLabel Typo="Typography.PaneHeader">@LOC("Import schema")</FluentLabel>
	</div>
	<div class="modal-with-tabs__menu">
		@if (!_isBusy && string.IsNullOrWhiteSpace(_error))
		{
			<FluentNavMenu Class="tf-tabnav">
				<FluentNavLink OnClick="@(_=> _activeTab = "new")" Class="@(_activeTab == "new" ? "selected" : "")">@LOC("New Columns")</FluentNavLink>
				<FluentNavLink OnClick="@(_=> _activeTab = "existing")" Class="@(_activeTab == "existing" ? "selected" : "")">@LOC("Already Present")</FluentNavLink>
			</FluentNavMenu>
		}
	</div>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
	@if (String.IsNullOrWhiteSpace(_error) && _newColumns.Count > 0)
	{
		<FluentButton Appearance="Appearance.Accent" OnClick="@_save" IconStart="@TfConstants.GetIcon("ArrowDownload").WithColor(Color.Neutral)"
		Loading="_isSubmitting" Disabled="@(_isSubmitting || _isBusy || _activeTab == "existing")">@LOC("Import")</FluentButton>
	}
	<FluentButton Appearance="Appearance.Neutral" OnClick="@_cancel">@LOC("Cancel")</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
	<div>
		@if (_isBusy)
		{
			<TfLoadingPane />
		}
		else if (!string.IsNullOrWhiteSpace(_error))
		{
			<FluentMessageBar Intent="@MessageIntent.Error" AllowDismiss="false">@_error</FluentMessageBar>

		}
		else if (_activeTab == "new")
		{
			@if (_newColumns.Count > 0)
			{
				var _rowIndex = -1;
				<div class="tf-grid-wrapper">
					<table class="tf-grid">
						<thead class="tf-grid-thead">
							<tr class="tf-grid-thead-bkg"></tr>
							<tr class="tf-grid-tr">
								<th class="tf-grid-th" style="width:30px;max-width:30px;"></th>
								<th class="tf-grid-th">@LOC("column name")</th>
								<th class="tf-grid-th" style="width:180px;max-width:180px;">@LOC("data type")</th>
								<th class="tf-grid-th">@LOC("SOURCE column")</th>
								<th class="tf-grid-th" style="width:180px;max-width:180px;">@LOC("SOURCE type")</th>
								<th class="tf-grid-th">@LOC("default")</th>
								<th class="tf-grid-th" style="width:80px;max-width:80px;">@LOC("nullable")</th>
								<th class="tf-grid-th" style="width:80px;max-width:80px;">@LOC("unique")</th>
								<th class="tf-grid-th" style="width:80px;max-width:80px;">@LOC("autogen")</th>
								<th class="tf-grid-th" style="width:80px;max-width:80px;">@LOC("searched")</th>
								<th class="tf-grid-th" style="width:110px;max-width:110px;">@LOC("global search")</th>
								<th class="tf-grid-th" style="width:120px;max-width:120px;">@LOC("search type")</th>
								<th class="tf-grid-th" style="width:80px;max-width:80px;">@LOC("sortable")</th>
							</tr>
						</thead>
						<tbody class="tf-grid-tbody">
							@foreach (var context in _newColumns)
							{
								_rowIndex++;
								<tr @key=context.Id class="tf-grid-tr">
									<td class="tf-grid-td">
										<div><FluentButton IconStart="@TfConstants.CloseIcon.WithColor(Color.Error)" OnClick="@(_=>_removeRow(context))" /></div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentTextField TextFieldType="@TextFieldType.Text" Value=@_processColumnName(context.DbName)
											ValueChanged="@(x => _dbNameChanged(x,context))" AutoComplete="off"
											Style="width:100%"
											Class="@_getValidationCssClass(context.SourceName,nameof(context.DbName))">
												<span slot="start" style="margin-right:-7px;">@TfAppState.Value.AdminDataProvider.ColumnPrefix</span>
											</FluentTextField>
											<TfValidationMessage Field="@nameof(context.DbName)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSelect OptionSelected="(x => x == context.DbType)"
											@bind-SelectedOption="@context.DbType"
											TOption="TfDatabaseColumnType"
											Style="width:100%"
											Class="@_getValidationCssClass(context.SourceName,nameof(context.DbType))">
												@foreach (var op in _schemaInfo.SourceTypeSupportedDbTypes[context.SourceType])
												{
													<FluentOption Value="@op.ToString()">@((new TucDatabaseColumnTypeInfo(op)).Name)</FluentOption>
												}
											</FluentSelect>
											<TfValidationMessage Field="@nameof(context.DbType)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>@context.SourceName</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSelect Value="@context.SourceType"
														  TOption="string"
														  ValueChanged="@(x => _sourceTypeChanged(x,context))" Style="width:100%"
														  Class="@_getValidationCssClass(context.SourceName,nameof(context.SourceType))">
												@foreach (var op in _schemaInfo.SourceTypeSupportedDbTypes.Keys)
												{
													<FluentOption Value="@op.ToString()">@op</FluentOption>
												}
											</FluentSelect>
											<TfValidationMessage Field="@nameof(context.SourceType)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentTextField TextFieldType="@TextFieldType.Text" @bind-Value=@context.DefaultValue AutoComplete="off"
															 Class="@_getValidationCssClass(context.SourceName,nameof(context.DefaultValue))" Style="width:100%" />
											<TfValidationMessage Field="@nameof(context.DefaultValue)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSwitch @bind-Value=@context.IsNullable @bind-Value:after=@(() => _nullableChanged(context)) Class="@_getValidationCssClass(context.SourceName,nameof(context.IsNullable))" />
											<TfValidationMessage Field="@nameof(context.IsNullable)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSwitch @bind-Value=@context.IsUnique Class="@_getValidationCssClass(context.SourceName,nameof(context.IsUnique))" />
											<TfValidationMessage Field="@nameof(context.IsUnique)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											@if ((new TucDatabaseColumnTypeInfo(context.DbType)).SupportAutoDefaultValue)
											{
												<FluentSwitch @bind-Value=@context.AutoDefaultValue Class="@_getValidationCssClass(context.SourceName,nameof(context.AutoDefaultValue))" />
												<TfValidationMessage Field="@nameof(context.AutoDefaultValue)" Index=_rowIndex Errors="ValidationErrors" />
											}
											else { 
												<span>n/a</span>
											}
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSwitch @bind-Value=@context.IsSearchable Class="@_getValidationCssClass(context.SourceName,nameof(context.IsSearchable))" />
											<TfValidationMessage Field="@nameof(context.IsSearchable)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSwitch @bind-Value=@context.IncludeInTableSearch Class="@_getValidationCssClass(context.SourceName,nameof(context.IncludeInTableSearch))" />
											<TfValidationMessage Field="@nameof(context.IncludeInTableSearch)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSelect OptionSelected="(x => x.ToString() == context.PreferredSearchType.ToString())"
														  TOption="TfDataProviderColumnSearchType"
														  @bind-SelectedOption="@context.PreferredSearchType"
														  Items="@(Enum.GetValues<TfDataProviderColumnSearchType>())"
														  Style="width:100%" Class="@_getValidationCssClass(context.SourceName,nameof(context.PreferredSearchType))"
														  OptionText="((p)=> (new TucDataProviderColumnSearchTypeInfo(p)).Name)"
														  OptionValue="((p)=> ((int)p).ToString())" />
											<TfValidationMessage Field="@nameof(context.PreferredSearchType)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
									<td class="tf-grid-td">
										<div>
											<FluentSwitch @bind-Value=@context.IsSortable Class="@_getValidationCssClass(context.SourceName,nameof(context.IsSortable))" />
											<TfValidationMessage Field="@nameof(context.IsSortable)" Index=_rowIndex Errors="ValidationErrors" />
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
			else
			{
				<FluentMessageBar Intent="@MessageIntent.Info" AllowDismiss="false">@LOC("No new columns are found in the source")</FluentMessageBar>
			}
		}
		else if (_activeTab == "existing")
		{

			<div class="tf-grid-wrapper">
				<table class="tf-grid">
					<thead class="tf-grid-thead">
						<tr class="tf-grid-thead-bkg"></tr>
						<tr class="tf-grid-tr">
							<th class="tf-grid-th" style="width:180px;max-width:180px;">@LOC("column name")</th>
							<th class="tf-grid-th" style="width:180px;max-width:180px;">@LOC("data type")</th>
							<th class="tf-grid-th">@LOC("SOURCE column")</th>
							<th class="tf-grid-th" style="width:180px;max-width:180px;">@LOC("SOURCE type")</th>
							<th class="tf-grid-th" style="width:180px;max-width:180px;">@LOC("Default")</th>
							<th class="tf-grid-th" style="width:120px;max-width:120px;">@LOC("Nullable")</th>
							<th class="tf-grid-th" style="width:120px;max-width:120px;">@LOC("Unique")</th>
							<th class="tf-grid-th" style="width:120px;max-width:120px;">@LOC("Autogenerated")</th>
							<th class="tf-grid-th" style="width:120px;max-width:120px;">@LOC("Searchable")</th>
							<th class="tf-grid-th" style="width:120px;max-width:120px;">@LOC("Global search")</th>
							<th class="tf-grid-th" style="width:150px;max-width:150px;">@LOC("Search type")</th>
							<th class="tf-grid-th" style="width:120px;max-width:120px;">@LOC("Sortable")</th>
						</tr>
					</thead>
					<tbody class="tf-grid-tbody">
						@foreach (var context in _existingColumns)
						{
							<tr @key=context.Id class="tf-grid-tr">
								<td class="tf-grid-td">
									<div>@context.DbName</div>
								</td>
								<td class="tf-grid-td">
									<div>@((new TucDatabaseColumnTypeInfo(context.DbType)).Name)</div>
								</td>
								<td class="tf-grid-td">
									<div>@context.SourceName</div>
								</td>
								<td class="tf-grid-td">
									<div>@context.SourceType</div>
								</td>
								<td class="tf-grid-td">
									<div>@context.DefaultValue</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsNullable Disabled="true" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsUnique Disabled="true" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.AutoDefaultValue Disabled="true" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsSearchable Disabled="true" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IncludeInTableSearch Disabled="true" />
									</div>
								</td>
								<td class="tf-grid-td">
									<div>@((new TucDataProviderColumnSearchTypeInfo(context.PreferredSearchType)).Name)</div>
								</td>
								<td class="tf-grid-td">
									<div>
										<FluentSwitch @bind-Value=@context.IsSortable Disabled="true" />
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>

			@if (_existingColumns.Count == 0)
			{
				<FluentMessageBar Intent="@MessageIntent.Info" AllowDismiss="false">@LOC("No existing columns are yet created")</FluentMessageBar>
			}
		}
	</div>
</FluentDialogBody>
