@namespace WebVella.Tefter.EmailSender.Components
@inherits TfBaseComponent


<TucGridToolbar>
	<ToolbarSearch>
		<FluentSearch Placeholder="@LOC("search...")" ValueChanged="_searchValueChanged" Value="@_search" AutoComplete="off" />
	</ToolbarSearch>
	<ToolbarRight>
		<FluentButton Appearance="@Appearance.Outline" OnClick="_createTestHandler" IconStart="@TfConstants.AddIcon.WithColor(Color.Accent)">
			@LOC("Sent test email")
		</FluentButton>
	</ToolbarRight>
</TucGridToolbar>
@if (_messages.Count == 0)
{
	<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Info">@LOC("No emails")</FluentMessageBar>
}
else
{
	<div class="tf-grid-wrapper">
		<table class="tf-grid">
			<thead class="tf-grid-thead">
				<tr class="tf-grid-thead-bkg"></tr>
				<tr class="tf-grid-tr">
					<th class="tf-grid-th" style="min-width:40px;width:40px;"></th>
					<th class="tf-grid-th" style="min-width:80px;width:80px;">@LOC("st")</th>
					<th class="tf-grid-th" style="min-width:140px;width:140px;">@LOC("created on")</th>
					<th class="tf-grid-th">@LOC("subject")</th>
					<th class="tf-grid-th">@LOC("recipients")</th>
				</tr>
			</thead>
			<tbody class="tf-grid-tbody">
				@foreach (var context in _messages)
				{
					<tr @key=@context.Id class="tf-grid-tr">
						<td class="tf-grid-td">
							<div>
								<FluentStack>
									<FluentButton Title="@LOC("view email")" OnClick="@(_ => _viewEmailHandler(context))"
												  Appearance="@Appearance.Outline" IconStart="@TfConstants.ViewIcon.WithColor(Color.Accent)" />
									@if (context.Status == EmailStatus.Sent || context.Status == EmailStatus.Aborted)
									{
										<FluentButton Title="@LOC("resent")" OnClick="@(_ => _resentEmailHandler(context))"
													  Appearance="@Appearance.Outline" IconStart="@TfConstants.GetIcon("MailArrowUp").WithColor(Color.Accent)"
													  Disabled="@(_submitingEmail is not null)" Loading="@(_submitingEmail == context.Id)" />
									}
									else
									{
										<FluentButton Title="@LOC("cancel")" OnClick="@(_ => _cancelEmailHandler(context))"
													  Appearance="@Appearance.Outline" IconStart="@TfConstants.CloseIcon.WithColor(Color.Error)"
													  Disabled="@(_submitingEmail is not null)" Loading="@(_submitingEmail == context.Id)" />
									}
								</FluentStack>
							</div>
						</td>
						<td class="tf-grid-td">
							<div>@context.Status.ToDescriptionString()</div>
						</td>
						<td class="tf-grid-td">
							<div>
								<div>@context.CreatedOn.ToString(TfConstants.DateHourFormat)</div>
								@if (context.SentOn is not null)
								{
									<div class="td-description" title="send on">@context.SentOn.Value.ToString(TfConstants.DateHourFormat)</div>
								}
							</div>
						</td>
						<td class="tf-grid-td">
							<div>@context.Subject</div>
						</td>
						<td class="tf-grid-td">
							<div>
								@if (context.Recipients.Count > 0)
								{
									<div>@String.Join(", ", context.Recipients.Select(x => x.Address))</div>
								}
								@if (context.RecipientsCc.Count > 0)
								{
									<div class="td-description">CC: @String.Join(", ", context.RecipientsCc.Select(x => x.Address))</div>
								}
								@if (context.RecipientsBcc.Count > 0)
								{
									<div class="td-description">BCC: @String.Join(", ", context.RecipientsBcc.Select(x => x.Address))</div>
								}
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}


<TucPager Page="@(_navState?.Page ?? 1)" GoLast="@_goLastPage" GoNext="@_goNextPage"
		  GoFirst="@_goFirstPage" GoPrevious="@_goPreviousPage" GoOnPage="@_goOnPage"
		  PageSize="@(_navState?.PageSize ?? TfConstants.PageSize)" Style="margin-top:1rem;"/>