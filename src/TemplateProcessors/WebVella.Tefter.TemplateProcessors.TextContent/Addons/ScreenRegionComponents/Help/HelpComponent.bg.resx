<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="All non-template content will remain unchanged and will retain its original placement relative to its position in the template." xml:space="preserve">
    <value>Всички не-шаблонни съдържания ще останат непроменени и ще запазят оригиналното си разположение спрямо позицията им в шаблона.</value>
  </data>
  <data name="Each data group, as defined by the 'Group by' property, will generate a separate instance of the template's result." xml:space="preserve">
    <value>Всяка група данни, определена чрез свойството 'Групиране по', ще генерира отделен екземпляр на резултата от шаблона.</value>
  </data>
  <data name="Each template tag must start with '{0}' and end with '{1}'" xml:space="preserve">
    <value>Всеки шаблонен таг трябва да започва с '{0}' и да завършва с '{1}'</value>
  </data>
  <data name="General Rules" xml:space="preserve">
    <value>Общи правила</value>
  </data>
  <data name="Horizontal data transposition" xml:space="preserve">
    <value>Хоризонтално транспониране на данни</value>
  </data>
  <data name="HTML: The content will be processed line by 'div' or 'p' tag." xml:space="preserve">
    <value>HTML: Файлът ще бъде обработен ред по ред чрез 'div' или 'p' таг. </value>
  </data>
  <data name="PLAIN TEXT: The content will be processed line by line." xml:space="preserve">
    <value>ТЕКСТ: Файлът ще бъде обработен ред по ред. </value>
  </data>
  <data name="result" xml:space="preserve">
    <value>резултат</value>
  </data>
  <data name="Selecting data by index" xml:space="preserve">
    <value>Избор на данни по индекс</value>
  </data>
  <data name="template" xml:space="preserve">
    <value>шаблон</value>
  </data>
  <data name="The template requires the exact name of the data column to match the name used in the data provider." xml:space="preserve">
    <value>Шаблонът изисква точнoто име на колоната с данни да съвпада с името, използвано в доставчика на данни.</value>
  </data>
  <data name="The template utilizes plain text or HTML, which will be processed to replace the identified template tags with the selected data according to the following rules:" xml:space="preserve">
    <value>Шаблонът използва текстови или HTML файлове, които ще бъдат обработени за замяна на идентифицираните тагове на шаблона с избраните данни според следните правила:</value>
  </data>
  <data name="This flow can be applied by the 'F'(flow) template setting with value 'H' (horizontal). Example if there are 3 rows of data:" xml:space="preserve">
    <value>Този процес може да бъде приложен чрез настройката на шаблона 'F' (flow) със стойност 'H' (horizontal). Например, ако има 3 реда с данни:</value>
  </data>
  <data name="This is is the default flow. Example if there are 3 rows of data:" xml:space="preserve">
    <value>Това е стандартният процес. Например, ако има 3 реда с данни:</value>
  </data>
  <data name="Vertical data transposition" xml:space="preserve">
    <value>Вертикално транспониране на данни</value>
  </data>
  <data name="You can select a specific row to be processed by its index. &lt;u&gt;Important&lt;/u&gt;: The index starts at 0, meaning the first row has an index of 0. Example if there are 3 rows of data:" xml:space="preserve">
    <value>Можете да изберете конкретен ред за обработка по неговия индекс. &lt;u&gt;Важно&lt;/u&gt;: Индексът започва от 0, което означава, че първият ред има индекс 0. Например, ако има 3 реда с данни:</value>
  </data>
</root>