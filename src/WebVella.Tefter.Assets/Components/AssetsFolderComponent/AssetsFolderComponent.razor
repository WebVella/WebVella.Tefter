@namespace WebVella.Tefter.Assets.Components
@using WebVella.Tefter.UI.Components
@inherits TfBaseComponent

@if (_isLoading)
{
	<TucLoadingPane />
}
else if (Folder is null)
{
	<div style="margin:var(--tfui-padding)">
		<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("No assets folder is selected for this page!")</FluentMessageBar>
	</div>
}
else if (String.IsNullOrWhiteSpace(Folder.DataIdentity))
{
	<div style="margin:var(--tfui-padding)">
		<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">@LOC("The assets folder has no data identity!")</FluentMessageBar>
	</div>
}
else
{
	<TucLayoutPageContent Title="@Context.SpacePage.Name"
				   Icon="@Context.SpacePage.FluentIconName">
		<Toolbar>
			<FluentButton Appearance="Appearance.Outline" IconStart="@TfConstants.GetIcon("Document")"
						  OnClick="_addFile" Style="margin-right:10px;">@LOC("Add file")</FluentButton>
			<FluentButton Appearance="Appearance.Outline" IconStart="@TfConstants.GetIcon("Link")"
						  OnClick="_addLink">@LOC("Add link")</FluentButton>
			<FluentSearch Placeholder="@LOC("search...")" AutoComplete="off" Value="@_search" ValueChanged="_searchValueChanged"
						  Style="margin-left:1rem" @ref=_refSearch />
		</Toolbar>
		<ChildContent>
			<div style="margin:var(--tfui-padding)">
				@if (_items.Count == 0)
				{
					<FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Info">@LOC("No assets in this folder yet")</FluentMessageBar>

				}
				<div class="items-wrapper">
					@foreach (var asset in _items)
					{
						var assetMeta = _getAssetMeta(asset);

						<div class="asset-item" @key=@asset.Id>
							<div class="asset-item__icon">
								@if (!String.IsNullOrWhiteSpace(assetMeta.FavIcon))
								{
									<div class="image-wrapper">
										<img src="@assetMeta.FavIcon" alt="" />
									</div>
								}
								else
								{
									<FluentIcon Value="@assetMeta.Icon" />
								}
							</div>
							<a href="@assetMeta.Url" target="_blank" class="asset-item__meta">
								<div class="asset-item__meta__title">@assetMeta.Title</div>
								<div class="asset-item__meta__description">@((MarkupString)assetMeta.Description)</div>
							</a>
							<div class="asset-item__action">
								<FluentButton OnClick="@(_ => _actionMenuIdOpened = asset.Id)" StopPropagation="true"
											  Id="@($"tf-{asset.Id}")" Style="@(_actionMenuIdOpened == asset.Id ? "visibility:visible;" : "")"
											  Appearance="@Appearance.Outline" IconStart="@TfConstants.GetIcon("MoreVertical")" />
								<FluentMenu UseMenuService="true"
											Open="(_actionMenuIdOpened == asset.Id)"
											OpenChanged="@(x => _actionMenuIdOpened = x ? asset.Id : null)"
											Anchor="@($"tf-{asset.Id}")">
									<FluentMenuItem OnClick="@(_ => _deleteAsset(asset))">
										<FluentIcon Value="@TfConstants.GetIcon("Delete").WithColor(Color.Error)" Slot="start" />
										<FluentLabel>@LOC("Delete")</FluentLabel>
									</FluentMenuItem>
									<FluentMenuItem OnClick="@(_ => _editAsset(asset))">
										<FluentIcon Value="@TfConstants.GetIcon("Edit")" Slot="start" />
										<FluentLabel>@LOC("Update")</FluentLabel>
									</FluentMenuItem>
									<FluentMenuItem OnClick="@(_ => _getAsset(asset))">
										@if (asset.Type == AssetType.File)
										{
											<FluentIcon Value="@TfConstants.GetIcon("ArrowDownload")" Slot="start" />
											<FluentLabel>@LOC("Download")</FluentLabel>
										}
										else
										{
											<FluentIcon Value="@TfConstants.GetIcon("GlobeSearch")" Slot="start" />
											<FluentLabel>@LOC("Browse URL")</FluentLabel>
										}

									</FluentMenuItem>
								</FluentMenu>
							</div>
						</div>
					}
				</div>
			</div>
		</ChildContent>
	</TucLayoutPageContent>
}


