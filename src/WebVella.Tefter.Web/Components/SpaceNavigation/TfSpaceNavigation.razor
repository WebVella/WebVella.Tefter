@inherits TfBaseComponent

<div class="@($"sidebar-nav {(UserState.Value.User.Settings.IsSidebarOpen ? "expanded" : "collapsed")}")">
	<div class="sidebar-toolbar">
		<div class="sidebar-toolbar-mode">
			<FluentToolbar Class="modebar">
				<FluentButton Class="btn tree active" Title="show tree" BackgroundColor="@SessionState.Value.SpaceColor"
							  Style="@($"border-color:{SessionState.Value.SpaceBorderColor} !important")">
					<FluentIcon Value="@(new Icons.Regular.Size20.Branch())" />
				</FluentButton>
				<FluentButton Class="btn bookmark" Title="show bookmarked" Appearance="@Appearance.Outline">
					<FluentIcon Value="@(new Icons.Regular.Size20.Star())" Color="@Color.Custom" CustomColor="@SessionState.Value.SpaceColor" />
				</FluentButton>
				<FluentButton Class="btn save" Title="show saved" Appearance="@Appearance.Outline">
					<FluentIcon Value="@(new Icons.Regular.Size20.Save())" Color="@Color.Custom" CustomColor="@SessionState.Value.SpaceColor" />
				</FluentButton>
			</FluentToolbar>
		</div>
		<div class="sidebar-toolbar-search">
			<FluentTextField Class="search" Placeholder="search..." Immediate="true" ImmediateDelay="500" Value=@search ValueChanged="onSearch"/>
		</div>
		<div class="sidebar-toolbar-actions">
			<FluentButton Id="space-settings" Title="space actions"
						  OnClick="() => _settingsMenuVisible = !_settingsMenuVisible" Appearance="@Appearance.Outline">
				<FluentIcon Value="@(new Icons.Regular.Size20.Settings())" Color="@Color.Custom" CustomColor="@SessionState.Value.SpaceColor" />
			</FluentButton>
			<FluentMenu Anchor="space-settings" @bind-Open="_settingsMenuVisible" Width="200px">
				<FluentMenuItem OnClick="onDetailsClick">
					Space Details
					<span slot="start">
						<FluentIcon Value="@(new Icons.Regular.Size20.Info())" Slot="start" />
					</span>
				</FluentMenuItem>
				<FluentMenuItem OnClick="onRenameClick">
					Rename Space
					<span slot="start">
						<FluentIcon Value="@(new Icons.Regular.Size20.ClipboardPaste())" Slot="start" />
					</span>
				</FluentMenuItem>
				<FluentMenuItem OnClick="onRemoveClick">
					Delete Space
					<span slot="start">
						<FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Slot="start" />
					</span>
				</FluentMenuItem>
				<FluentMenuItem OnClick="onRemoveClick">
					Manage Access
					<span slot="start">
						<FluentIcon Value="@(new Icons.Regular.Size20.KeyMultiple())" Slot="start" />
					</span>
				</FluentMenuItem>
				<FluentMenuItem OnClick="onRemoveClick">
					Invite User
					<span slot="start">
						<FluentIcon Value="@(new Icons.Regular.Size20.PersonAdd())" Slot="start" />
					</span>
				</FluentMenuItem>
				<FluentDivider></FluentDivider>
				<FluentMenuItem OnClick="onAddClick">
					Add Space
					<span slot="start">
						<FluentIcon Value="@(new Icons.Regular.Size20.Add())" Slot="start" />
					</span>
				</FluentMenuItem>
				<FluentMenuItem OnClick="onAddClick">
					Add Space Data
					<span slot="start">
						<FluentIcon Value="@(new Icons.Regular.Size20.Add())" Slot="start" />
					</span>
				</FluentMenuItem>

			</FluentMenu>
		</div>
	</div>
	<div class="sidebar-inner">
		@if (_menuLoading)
		{
			<TfLoadingPane />
		}
		else
		{
			<FluentTreeView>
				@foreach (var item in _visibleMenuItems)
				{
					<FluentTreeItem Class="@item.LevelClass" Text="@item.Title" Selected="@item.Active" SelectedChanged="@item.OnSelect"
									Data="item" Id="@item.Id" @bind-Expanded="@item.Expanded"
									InitiallyExpanded="@item.Expanded"
									InitiallySelected="@item.Active">
						<FluentIcon Value="@item.Icon" Color="@Color.Neutral" Slot="start" />
						@foreach (var node in item.Nodes)
						{
							<FluentTreeItem Class="@node.LevelClass" Text="@node.Title"
											Data="node" Id="@node.Id"
											@bind-Expanded="@node.Expanded" InitiallyExpanded="@node.Expanded"
											Selected="@node.Active" SelectedChanged="@node.OnSelect">
								<FluentIcon Value="@node.Icon" Color="@Color.Neutral" Slot="start" />
							</FluentTreeItem>
						}
					</FluentTreeItem>
				}
			</FluentTreeView>
			@if (hasMore)
			{
				<FluentButton Class="load-more" Appearance="@Appearance.Outline" OnClick="loadMoreClick">Load more</FluentButton>
			}
		}
	</div>
</div>

